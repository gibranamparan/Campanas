@using CampanasDelDesierto_v1.HerramientasGenerales
@model IEnumerable<CampanasDelDesierto_v1.Models.Productor>

@{
    ViewBag.Title = "Lista de Productores";
    Layout = "~/Views/Shared/_Layout.cshtml";
    List<ExcelTools.ExcelParseError> erroresExcel = ViewBag.erroresExcel;
    ExcelTools.ExcelParseError errorGeneral = ViewBag.errorGeneral;

    string errorMsgPrimario = "";
    string erroresModalID = "";
    if (erroresExcel != null)
    {
        errorMsgPrimario = "Se presentaron <strong>" + erroresExcel.Count() + " errores</strong> al importar el documento Excel."
            + " Revise la tabla de errores de importación en la parte inferior.";
    }
    if (errorGeneral != null && errorGeneral.isError)
    {
        errorMsgPrimario = errorGeneral + "<br>" + errorMsgPrimario;
    }
}

<h2>@ViewBag.Title</h2>

<p>
    <a href="@Url.Action("Create")">
        <i class="fa fa-plus-circle"></i> Nuevo Productor
    </a> | 
    <a href="#" onclick="$('#formImportExcel').slideToggle()">
        <i class="fa fa-file-excel-o"></i> Importar de Excel
    </a>
</p>
@using (Html.BeginForm(null, null, FormMethod.Post,
    new { enctype = "multipart/form-data", @class = "form-inline",
        id ="formImportExcel", style="display:none" }))
{
    @Html.ValidationSummary()
    <div class="row">
        <div class="col-md-12">
            <label for="xlsFile">Importar de Excel</label>
            <input id="xlsFile" name="xlsFile" type="file" class="form-control"
                   accept="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" />
            <button class="btn btn-success">
                <i class="fa fa-upload"></i> Subir
            </button>
            <i class="fa fa-question-circle helpIcon" 
                 onclick="$('#msgAyudaImportacion').slideToggle();
                 $(this).toggleClass('clicked')"
                 style="cursor: pointer"></i>
        </div>
        <div id="msgAyudaImportacion" style="display: none;" class="col-md-12 alert alert-info">
            Para importar la información de los productores, cargue un archivo excel con la estructura
            mostrada en la siguiente imagen, respete el orden de las columnas. No es necesario
            que el nombre de las columnas sea el mismo. <br />
            <div style="text-align: center">
                <img style="border: 1px solid; margin: 1em auto" 
                     src="~/images/productores/excel_ejemplo.png" /> <br />
            </div>
            El sistema buscará en la base de datos los productores con el mismo numero de productor 
            que marque el archivo Excel.
            <ul>
                <li>
                    <strong>En caso de encontrarlo</strong>, modificará la información almacenada
                    en la base de datos por la informacion del registro Excel.
                </li>
                <li>
                    <strong>En caso de no encontrarlo</strong>, se creará un nuevo registro de productor
                     con las datos del archivo Excel.
                </li> 
            </ul>
        </div>
    </div>
}
<table class="table table-striped table-hover datatablejs">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.numProductor)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.nombreProductor)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.nombreCheque)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.domicilio)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.fechaIntegracion)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.RFC)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.zona)
            </th>
            <th class="actions"></th>
        </tr>
    </thead>

    <tbody>
        @foreach (var item in Model)
        {
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.numProductor)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.nombreProductor)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.nombreCheque)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.domicilio)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.fechaIntegracion)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.RFC)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.zona)
                </td>
                <td>
                    <a href="@Url.Action("Edit","Productores",new { id = item.idProductor })">
                        <i class="glyphicon glyphicon-pencil"></i> Editar
                    </a><br />
                    <a href="@Url.Action("Details","Productores",new { id = item.idProductor })">
                        <i class="fa fa-money"></i> Movimientos
                    </a><br />
                    <a href="@Url.Action("Desactivar","Productores",new { id = item.idProductor })">
                        <i class="glyphicon glyphicon-ban-circle"></i> Desactivar
                    </a>
                </td>
            </tr>
        }

        
    </tbody>
</table>


@if (!String.IsNullOrEmpty(errorMsgPrimario))
{
    erroresModalID = "importExcelErrorMessage";
    ViewDataDictionary vdd = new ViewDataDictionary();
    vdd.Add("erroresModalID", erroresModalID);
    vdd.Add("errorMsgPrimario", errorMsgPrimario);
    <div>
        @Html.Partial("../Shared/Partial_ExcelErrors", erroresExcel, vdd);
    </div>
}


@section Scripts{
    @if (erroresExcel != null && erroresExcel.Count() > 0)
    {
        <script>
            $('@("#"+ erroresModalID)').modal();
        </script>
    }
}