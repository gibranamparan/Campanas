@using CampanasDelDesierto_v1.Models
@using CampanasDelDesierto_v1.HerramientasGenerales
@model CampanasDelDesierto_v1.Models.LiquidacionSemanal

@{
    //Determa si la pantalla se encuentra en modo de edicion
    bool editMode = Model.idMovimiento > 0;

    //Es reporte de liquidacion
    bool reportMode = ViewBag.reportMode != null? ViewBag.reportMode : false;

    ViewBag.Title = reportMode?"Reporte":(editMode ? "Edición":"Registro"+" de Liquidacion Semanal");
    Layout = "~/Views/Shared/_Layout.cshtml";

    //Se determina el precio actual del dolar
    BaxicoWebService bws = new BaxicoWebService();
    string errorMessagePrecioDolar = String.Empty;
    decimal precioDolar = 0;

    if(editMode || reportMode)
    {
        precioDolar = Model.precioDelDolarEnLiquidacion;
    }else
    {
        precioDolar = bws.getCambioDolar(ref errorMessagePrecioDolar);
    }

    //Objeto para la forma de retenciones
    LiquidacionSemanal.VMRetenciones retenciones = new LiquidacionSemanal.VMRetenciones();

    Productor productor = Model.Productor;

    bool actualizar = false;
    if (editMode)
    {
        actualizar = ViewBag.actualizar!=null? ViewBag.actualizar:false;
    }

    //Se buscan todos los ingresos de cosecha que se han hecho por el productor
    List<PagoPorProducto> ingresosDeCosecha = new List<PagoPorProducto>();

    //Si es busqueda regular para crear
    if (!editMode)
    {
        ingresosDeCosecha = productor.filtrarPagosPorProducto(Model.temporadaDeCosecha, Model.semanaLiquidada, Model.semana)
            .Where(ing => ing.liquidacionDeCosechaID == null).ToList();
    }
    //Si es edicion
    else
    {
        //Se toma los ingresos ya asociados
        ingresosDeCosecha = Model.ingresosDeCosecha.ToList();
        //Si es actualizacion, se agregan a los ya asociados aquellos que nos eencuentran asociados con nada
        if (actualizar)
        {
            List<PagoPorProducto> ingresosDeCosechaNuevos = productor.filtrarPagosPorProducto(Model.temporadaDeCosecha, Model.semanaLiquidada, Model.semana)
            .Where(ing => ing.liquidacionDeCosechaID == null).ToList();
            ingresosDeCosecha.AddRange(ingresosDeCosechaNuevos);
            ingresosDeCosecha = ingresosDeCosecha.Where(mov=>Model.semanaLiquidada.hasInside(mov.fechaMovimiento))
                .OrderBy(mov => mov.fechaMovimiento).ToList();
        }
    }

    //Se determina el costo de el producto segun la zona del productor
    var productos = Model.temporadaDeCosecha.getListaProductos(productor.zona);

    //Se genera el reporte semanal
    var ingresoSemanal = productor.generarReporteSemanalIngresosCosecha(ingresosDeCosecha, productos, precioDolar);

    //Se calcula el total de ingreso por la cosecha registrada
    decimal costoCosechaSemana = ingresoSemanal.Sum(ingreso => ingreso.monto);
    Model.montoMovimiento = costoCosechaSemana; //Calculo de monto total por producto

    //Retenciones
    decimal retencionTotal = 0;
    decimal retencionAbono = 0;
    PrestamoYAbonoCapital abonoRetenido = new PrestamoYAbonoCapital();
    if (editMode)
    {
        //Calculo de retenciones capturadas
        retenciones.abonoAnticipos = Model.getMontoRetencion(Retencion.TipoRetencion.ABONO);
        retenciones.garantiaLimpieza = Model.getMontoRetencion(Retencion.TipoRetencion.SANIDAD);
        retenciones.retencionEjidal = Model.getMontoRetencion(Retencion.TipoRetencion.EJIDAL);
        retenciones.retencionOtro = Model.getMontoRetencion(Retencion.TipoRetencion.OTRO);

        //Se obtiene el abono retenido, si no hay tal, es nulo
        abonoRetenido = Model.abonoAnticipo;

        retencionTotal = retenciones.total;
        retencionAbono = retenciones.abonoAnticipos;
        Model.montoMovimiento -= retencionTotal;
    }

    Model.fechaMovimiento = Model.semanaLiquidada.endDate.AddDays(1);

    decimal abonoBalanceArbolOlivo=0, abonoBalanceAnticipos=0;
    //Estado actual de finanzas del productor
    decimal balanceActual = ViewBag.balanceActual;
    //Estado actual del balance por arboles de olivo del productor
    decimal balanceActualArboles = ViewBag.balanceActualArboles;
    if (editMode)
    {
        if(abonoRetenido.tipoDeBalance == MovimientoFinanciero.TipoDeBalance.CAPITAL_VENTAS)
        {
            abonoBalanceAnticipos = abonoRetenido.montoMovimiento;
        }else if(abonoRetenido.tipoDeBalance == MovimientoFinanciero.TipoDeBalance.VENTA_OLIVO)
        {
            abonoBalanceArbolOlivo = abonoRetenido.montoMovimiento;
        }

        balanceActual -= abonoBalanceAnticipos;
        balanceActualArboles -= abonoBalanceArbolOlivo;
    }

    //Lista de seleccion del tipo de abono para cada tipo de balance
    List<object> opcionesTipoCapital = ViewBag.opcionesTipoCapital;
    SelectList slOpcionesTipoCapital = new SelectList(opcionesTipoCapital, "Value", "Text", abonoRetenido.tipoDeMovimientoDeCapital);

    //Datos para parcial de informacion de productor
    ViewDataDictionary vddProductorInfo = new ViewDataDictionary();
    vddProductorInfo.Add("temporada", Model.temporadaDeCosecha);

    //Datos para parcial de reporte semanal
    ViewDataDictionary vddReporteSemanal = new ViewDataDictionary();
    vddReporteSemanal.Add("ingresosDeCosecha", ingresosDeCosecha);
}
<p class="hidden-print">
    <a href="@Url.Action("Details","Productores", new { id = productor.idProductor, temporada = Model.TemporadaDeCosechaID })">
        <i class="glyphicon glyphicon-arrow-left"></i> Ver Movimientos de este Productor
    </a>
</p>

@if(reportMode){
    @Html.Partial("Partial_EncabezadoReporte")
}

@*Informacino de productor*@
@Html.Partial("../Productores/Partial_InfoProductor", productor, vddProductorInfo)

@*Datos globales*@
<div class="panel panel-primary">
    <div class="panel-heading">
        <h3 class="panel-title">
            <strong style="color: white">@(reportMode?"Reporte de":editMode ? "Editar" : "Registrar")</strong>
            <span>Liquidación Semanal</span>
        </h3>
    </div>
    <div class="panel-body">
        @*Forma para consulta de ingresos de cosecha por semana*@
        <div class="row">
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            @using (Html.BeginForm(editMode?"Edit":"Create", "LiquidacionSemanal", FormMethod.Get, new {@class= "col-xs-12" }))
            {
                @Html.AntiForgeryToken()
                @Html.Hidden("temporada",Model.temporadaDeCosecha)
                if (editMode) { 
                    @Html.Hidden("actualizar", true)
                }

                <div class="form-group col-xs-3">
                    @Html.LabelFor(model => model.semanaLiquidada.startDate)
                    @Html.EditorFor(model => model.semanaLiquidada.startDate, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.semanaLiquidada.startDate, "", new { @class = "text-danger" })
                </div>
                <div class="form-group col-xs-3">
                    @Html.LabelFor(model => model.semanaLiquidada.endDate)
                    @Html.EditorFor(model => model.semanaLiquidada.endDate, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.semanaLiquidada.startDate, "", new { @class = "text-danger" })
                </div>

                <div class="form-group @(reportMode?"col-xs-2":"col-xs-1")">
                    @Html.LabelFor(model => model.semana)
                    @Html.EditorFor(model => model.semana, new { htmlAttributes = new { @class = "form-control", min = 0,
                        oninput = "$('#formLiquidacionSemanal input#semana').val($(this).val())"
               } })
                    @Html.ValidationMessageFor(model => model.semana, "", new { @class = "text-danger" })
                </div>
                <div class="form-group col-xs-3">
                    <div id="divPrecioDelDolar" class="@(reportMode?"col-xs-12":"col-xs-7")">
                        @Html.LabelFor(model => model.precioDelDolarEnLiquidacion)
                        @Html.EditorFor(model => model.precioDelDolarEnLiquidacion, new
                   {
                       htmlAttributes = new
                       {
                           @class = "form-control",
                           data_mask_reverse = "true",
                           data_mask = "###0.0000",
                           onkeyup= "refreshRetenciones(this)"
                       }
                   })
                        @Html.ValidationMessageFor(model => model.precioDelDolarEnLiquidacion, "", new { @class = "text-danger" })
                    </div>
                    <div class="col-xs-5 @(reportMode?"hidden":"")">
                        <a class="satLogo" target="_blank"
                           href="http://www.sat.gob.mx/informacion_fiscal/tablas_indicadores/Paginas/tipo_cambio.aspx">
                            <img src="/images/sat_logo.png" />
                        </a>
                        <img id="loadingImg" src="~/images/loading.gif" class="hidden"/>
                    </div>
                </div>

                <div class="form-group col-xs-1 @(reportMode?"hidden":"")">
                    <button class="btn btn-primary">@(!editMode?"Buscar":"Actualizar")</button>
                </div>
            }
        </div>

        @*Ingreso de cosecha*@
        @Html.Partial("Partial_ReporteSemanalCosecha", ingresoSemanal, vddReporteSemanal)

        @using (Html.BeginForm(editMode ? "Edit" : "Create", "LiquidacionSemanal",
            FormMethod.Post, new { id = "frmLiquidacion"}))
        {
            @Html.AntiForgeryToken()
            @Html.HiddenFor(model => model.idMovimiento)
            @Html.HiddenFor(model => model.idProductor)
            @Html.HiddenFor(model => model.TemporadaDeCosechaID)
            @Html.HiddenFor(model => model.semanaLiquidada.startDate)
            @Html.HiddenFor(model => model.semanaLiquidada.endDate)
            @Html.HiddenFor(model => model.abonoAnticipoID)
            @Html.HiddenFor(model => model.precioDelDolarEnLiquidacion)

            foreach (var ing in ingresosDeCosecha)
            {
                @Html.Hidden("ingresosDeCosechaID",ing.idMovimiento)
            }

            @*Retenciones*@
            @Html.Partial("Partial_ReporteSemanalRetencionesForm", retenciones)

            @*Forma para la creacion de la liquidacion*@
            <div class="panel panel-primary" id="formLiquidacionSemanal">
                <div class="panel-heading">
                    <h3 class="panel-title">Liquidación Semanal</h3>
                </div>
                <div class="panel-body">
                    @*Monto de cosecha*@
                    <div class="form-group col-xs-3">
                        <label>Total por Cosecha (USD):</label>
                        <input id="inputCostoCosechaSemana" class = "form-control"
                                data-mask = "###0.00" data-mask-reverse = "true" 
                                value="@costoCosechaSemana.ToString("C")" readonly/>
                    </div>

                    @*Menos*@
                    <span class="col-xs-1" style="font-size:2em; text-align: center">-</span>

                    @*Retenciones*@
                    <div class="form-group col-xs-3">
                        <label>Retenciones Totales (USD): </label>
                        <input id="inputTotalRetencion" class="form-control"
                                data-mask="###0.00" data-mask-reverse="true"
                                value="@retencionTotal.ToString("C")" readonly />
                    </div>

                    @*Igual A*@
                    <span class="col-xs-1" style="font-size:2em; text-align: center">=</span>

                    @*MOnto total a pagar*@
                    <div class="form-group col-xs-4">
                        <label>Total a Pagar (USD): </label>
                        @Html.EditorFor(model => model.montoMovimiento, new
                           {
                               htmlAttributes = new
                               {
                                   @class = "form-control",
                                   data_mask = "###0.00",
                                   data_mask_reverse = "true",
                                   @readonly = "readonly"
                               }
                           })
                        @Html.ValidationMessageFor(model => model.montoMovimiento, "", new { @class = "text-danger" })
                    </div>

                    @*Liquidacion*@

                    <div class="form-group col-xs-4">
                        @Html.LabelFor(model => model.fechaMovimiento)
                        @Html.EditorFor(model => model.fechaMovimiento, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.fechaMovimiento, "", new { @class = "text-danger" })
                    </div>

                    <div class="form-group col-xs-4">
                        @Html.LabelFor(model => model.cheque)
                        @Html.EditorFor(model => model.cheque, new { htmlAttributes = new { @class = "form-control", oninput="$(this).val($(this).val().toUpperCase())" } })
                        @Html.ValidationMessageFor(model => model.cheque, "", new { @class = "text-danger" })
                    </div>

                    <div class="form-group col-xs-4">
                        @Html.LabelFor(model => model.semana, htmlAttributes: new { @class = "control-label col-xs-4" })
                        @Html.EditorFor(model => model.semana, new { htmlAttributes = new {@readonly = "readonly", min = 0 } })
                        @Html.ValidationMessageFor(model => model.semana, "", new { @class = "text-danger" })
                    </div>

                    <div class="form-group col-xs-4" id="inputTipoCapital"
                         style="display:@(String.IsNullOrEmpty(abonoRetenido.tipoDeMovimientoDeCapital)?"none":"inline-block")">
                        <label>Abono al balance:</label>
                        @Html.DropDownList("tipoCapital", slOpcionesTipoCapital, new { @class = "form-control" })
                    </div>

                    <div class="form-group @(reportMode?"hidden":"")">
                        <div class="col-xs-12">
                            <button class="btn btn-success" @(ingresosDeCosecha.Count()==0?"disabled":"")>
                                @(editMode ? "Guardar" : "Crear")
                            </button>
                        </div>
                    </div>
                </div>
            </div>

            @*Saldo Adeudo acumulado*@
            <div class="panel panel-info">
                <div class="panel-heading">
                    <h3 class="panel-title">Saldo de Adeudo Acumulado</h3>
                </div>
                <div class="panel-body" id="pnlSaldoAnticipos">
                    @*Balance Actual*@
                    <div class="form-group col-xs-4">
                        @Html.LabelFor(model => model.Productor.balanceActual, htmlAttributes: new { @class = "control-label col-xs-4" })
                        <div class="col-xs-8">
                            <input id="balanceActual" class="form-control"
                                   data-mask="###0.00" data-mask-reverse="true"
                                   value="@balanceActual.ToString("C")" readonly />
                        </div>
                    </div>

                    @*Menos*@
                    <span class="col-xs-1" style="font-size:2em">-</span>

                    @*Retenciones*@
                    <div class="form-group col-xs-3">
                        <label class="control-label col-xs-5">Abono de la semana (USD): </label>
                        <div class="col-xs-7">
                            <input id="inputAbonoSemana" class="form-control"
                                   data-mask="###0.00" data-mask-reverse="true"
                                   value="@abonoBalanceAnticipos.ToString("C")" readonly />
                        </div>
                    </div>

                    @*Igual A*@
                    <span class="col-xs-1" style="font-size:2em">=</span>

                    @*MOnto total a pagar*@
                    <div class="form-group col-xs-3">
                        <label class="control-label col-xs-5">Saldo a Liquidar (USD): </label>
                        <div class="col-xs-7">
                            <input id="inputSaldoLiquidar" class="form-control"
                                   data-mask="###0.00" data-mask-reverse="true"
                                   value='@((balanceActual + abonoBalanceAnticipos).ToString("C"))' readonly />
                        </div>
                    </div>
                </div>
            </div>

            @*Balance de deuda de arbolitos*@
            <div class="panel panel-info" id="pnlSaldoArboles">
                <div class="panel-heading">
                    <h3 class="panel-title">Saldo por Árboles de Olivo</h3>
                </div>
                <div class="panel-body">
                    @*Balance Actual*@
                    <div class="form-group col-xs-4">
                        @Html.LabelFor(model => model.Productor.balanceActualArboles, htmlAttributes: new { @class = "control-label col-xs-4" })
                        <div class="col-xs-8">
                            <input id="balanceActual" class="form-control"
                                   data-mask="###0.00" data-mask-reverse="true"
                                   value="@balanceActualArboles.ToString("C")" readonly />
                        </div>
                    </div>

                    @*Menos*@
                    <span class="col-xs-1" style="font-size:2em">-</span>

                    @*Retenciones*@
                    <div class="form-group col-xs-3">
                        <label class="control-label col-xs-5">Abono de la semana (USD): </label>
                        <div class="col-xs-7">
                            <input id="inputAbonoSemana" class="form-control"
                                   data-mask="###0.00" data-mask-reverse="true"
                                   value="@abonoBalanceArbolOlivo.ToString("C")" readonly />
                        </div>
                    </div>

                    @*Igual A*@
                    <span class="col-xs-1" style="font-size:2em">=</span>

                    @*MOnto total a pagar*@
                    <div class="form-group col-xs-3">
                        <label class="control-label col-xs-5">Saldo a Liquidar (USD): </label>
                        <div class="col-xs-7">
                            <input id="inputSaldoLiquidar" class="form-control"
                                   data-mask="###0.00" data-mask-reverse="true"
                                   value='@((balanceActualArboles + abonoBalanceArbolOlivo).ToString("C"))' readonly />
                        </div>
                    </div>
                </div>
            </div>
        }
        @*Reporte de retenciones de sanidad*@
        @{ 
            ViewDataDictionary vddReporteSemanalSanidad = new ViewDataDictionary();
            vddReporteSemanalSanidad.Add("titulo", "Acumulado de Retencion de Garantía de Sanidad");
            vddReporteSemanalSanidad.Add("tipoRetencion", Retencion.TipoRetencion.SANIDAD);
        }
        @Html.Partial("Partial_ReporteRetencion", Model, vddReporteSemanalSanidad)

        @*Reporte de retenciones ejidales*@
        @*Solo se muestra si en esta temporada a este productor se le ha hecho una retencion ejidal antes*@
        @if (productor.MovimientosFinancieros.Where(mov => mov.TemporadaDeCosechaID == Model.TemporadaDeCosechaID)
            .Where(mov => mov.getTypeOfMovement() == MovimientoFinanciero.TypeOfMovements.RENTENCION)
            .Where(mov=>((Retencion)mov).tipoDeDeduccion == Retencion.TipoRetencion.EJIDAL).Count() > 0)
        {
            ViewDataDictionary vddReporteSemanalEjidal = new ViewDataDictionary();
            vddReporteSemanalEjidal.Add("titulo", "Acumulado de Retencion Ejidal");
            vddReporteSemanalEjidal.Add("tipoRetencion", Retencion.TipoRetencion.EJIDAL);
            @Html.Partial("Partial_ReporteRetencion", Model, vddReporteSemanalEjidal)
        }
    </div>
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script>
        //Si se hace un cambio de seleccion en el tipo de abono para cierto balance
        $("#tipoCapital").change(function () {
            //Se pone en ceros los campos de abono semanal de los balances
            $("input[id=inputAbonoSemana]").val(numeral(0).format('0.00'));
            //Input donde se introduce la retencion
            var inputRetencion = $("#abonoAnticipos");
            //Input del abono semanal para el tipo de balance seleccionado
            var inputAbonoSemana = $(getSelectorInputAbono());
            //Se introduce el valor de la retencion en el correspondiente abono semanal
            inputAbonoSemana.val(inputRetencion.val());
            //Se refrescan todos los saldos a pagar de todos los balances
            refreshSaldos(inputAbonoSemana, inputRetencion)
        })

        //Segun el dropdown de tipo de abono, la funcion arroja el selector correspondiente a el abono semanal
        //para el balance de anticipos o de arboles
        function getSelectorInputAbono() {
            var selector = '#';
            if ($("#tipoCapital").val() == '@(PrestamoYAbonoCapital.TipoMovimientoCapital.ABONO)') {
                selector += 'pnlSaldoAnticipos'
            } else if ($("#tipoCapital").val() == '@(PrestamoYAbonoCapital.TipoMovimientoCapital.ABONO_ARBOLES)') {
                selector += 'pnlSaldoArboles'
            }
            selector += " #inputAbonoSemana"

            return selector;
        }

        //Recalcula los reportes semanales para ambos balances de arboles y anticipos
        function refreshSaldos(inputAbonoSemana, inputRetencion) {
            $.each($("input[id=inputAbonoSemana]"), function (idx, inputAbonoSemana) {
                inputAbonoSemana = $(inputAbonoSemana);
                var parent = inputAbonoSemana.closest(".panel-body");
                var saldo = parent.find("#inputSaldoLiquidar");

                var balanceActual = parent.find("#balanceActual");
                var saldoPagar = balanceActual.val() - inputAbonoSemana.val()
                saldoPagar = saldoPagar < 0 ? 0 : saldoPagar;

                saldo.val(numeral(saldoPagar).format('0.00')).trigger('input');
            })
        }   

        $("#formRetenciones input:even").keyup(function () {
            var totalRetencion = 0;
            //Por cada input de retencion, se suma el monto
            $.each($("#formRetenciones input:even"), function (idx, item) {
                totalRetencion += Number($(item).val());
            });

            //Para el input de anticipo a abonos
            if ($(this).attr("id") == "abonoAnticipos") {
                var inputRetencion = $(this);
                //Se visualiza el cambio del balance
                $("#inputAbonoSemana").val(numeral(0).format('0.00'));

                var inputAbonoSemana = $(getSelectorInputAbono());
                inputAbonoSemana.val(inputRetencion.val());
                refreshSaldos(inputAbonoSemana, inputRetencion)
                
                //Aparece o desaparece el dropdown de tipo de abono si se introdujo una retencion de este tipo
                $("#inputTipoCapital").slideDownOrUp(Number(inputRetencion.val()) > 0)
            }

            //Para el input de garantia de sanidad
            if ($(this).attr("id") == "garantiaLimpieza" || $(this).attr("id") == "retencionEjidal") {
                //Se componen el selector de los campos del reporte por retencion segun la retencion modificada
                var pnlSelector = $(this).attr("id") == "garantiaLimpieza" ? "pnlRetencionSANIDAD" :
                    $(this).attr("id") == "retencionEjidal" ? "pnlRetencionEJIDAL" : "";
                var selector = "#" + pnlSelector + " #reporteSemanal_";

                //Se visualiza el cambio del balance
                $(selector+"garantiaSemana").val($(this).val());
                var garantiaActual = Number($(selector + "garantiaAcumulada").val()) + Number($(this).val())
                $(selector + "garantiaActual").val(numeral(garantiaActual).format('0.00'));
            }

            $("#inputTotalRetencion").val(numeral(totalRetencion).format('0.00')).trigger('input');
            var totalAPagar = $("#inputCostoCosechaSemana").val() - totalRetencion;
            $("#montoMovimiento").val(numeral(totalAPagar).format('0.00')).trigger('input');

        })
        function recalcularMonto(tbRetencion) {
            var retencion = Number($(tbRetencion).val());
            $("#montoMovimiento").val(numeral(@Model.montoMovimiento -retencion)
                .format('0.00')).trigger('input');
        }

        function setPrecioDolar() {
            var antiForgeryToken = $("input[name=__RequestVerificationToken]").val();
            $("#loadingImg").toggleClass('hidden');

            //Se hace solicitud del precio del dolar al server
            getTipoCambioAsync(
                function (res) {
                    $("#precioDelDolarEnLiquidacion").val(numeral(res.precioDolar).format('0.0000')).trigger('input');
                    $('#precioDelDolarEnLiquidacion').attr('value', res.precioDolar);
                    precioDolar = res.precioDolar;
                    //recalcularMontoDolares();
                    //Copia el tipo de cambio a el campo hidden en la forma para darse de alta
                    $("#precioDelDolarEnLiquidacion").trigger("keyup");
                },
                function (err) { },
                function () {
                    $("#loadingImg").toggleClass('hidden')
                }, antiForgeryToken)
        }

        function refreshRetenciones(inputDolar){
            $('#frmLiquidacion #precioDelDolarEnLiquidacion').val($(inputDolar).val())
            $("#formRetenciones input:even").trigger("keyup");
            $.each($("table#tblReporteSemanaCosecha td.montoUSDReporte"), function (idx, celdaUSD) {
                celdaUSD = $(celdaUSD);
                var montoUSD = Number(numeral(celdaUSD.html()).format("0.00"));
                var celdaMXN = celdaUSD.siblings("td.montoMXNReporte");
                var precioDolar = Number($(inputDolar).val());
                celdaMXN.html(numeral(montoUSD * precioDolar).format('$0,0.00'));
            })
        }
        
        @if(!editMode && !reportMode) {
            @("setPrecioDolar()");
        }
    </script>
    @if (editMode || editMode)
    {
        <script>
            $("#formRetenciones input:even").trigger("keyup")
        </script>
    }
    @if (reportMode)
    {
        <script>
            $("input, select").attr("disabled", true);
        </script>

        <style>
            @@media print{
                /*body {
                    margin-top: 50mm; 
                    margin-bottom: 50mm; 
                    margin-left: 0mm; 
                    margin-right: 0mm
                }*/

                .form-group{
                    margin-bottom: 5px;
                }

                label{
                    margin-bottom: 0px;
                }

                #formLiquidacionSemanal{
                    page-break-before:always;
                    margin-top: 2em;
                }
                #main > .inner > section{
                    padding: 0;
                }
            }
            /*
            @@page {
                margin-top: 5cm;
                margin-bottom: 5cm;
             }*/
        </style>
    }
}
