@using CampanasDelDesierto_v1.Models
@using CampanasDelDesierto_v1.HerramientasGenerales
@model CampanasDelDesierto_v1.Models.LiquidacionSemanal

@{
    //Determa si la pantalla se encuentra en modo de edicion
    bool editMode = Model.idMovimiento > 0;
    ViewBag.Title = editMode?"Edición":"Registro"+" de Liquidacion Semanal";
    Layout = "~/Views/Shared/_Layout.cshtml";

    //Se determina el precio actual del dolar
    BaxicoWebService bws = new BaxicoWebService();
    string errorMessagePrecioDolar = String.Empty;
    decimal precioDolar = bws.getCambioDolar(ref errorMessagePrecioDolar);

    //Objeto para la forma de retenciones
    LiquidacionSemanal.VMRetenciones retenciones = new LiquidacionSemanal.VMRetenciones();

    //Calculo de ingresos totales en el periodo
    Productor productor = Model.Productor;
    var ingresoSemanal = productor.generarReporteSemanalIngresosCosecha(Model.temporadaDeCosecha, precioDolar, Model.semanaLiquidada);
    decimal costoCosechaSemana = ingresoSemanal.Sum(ingreso => ingreso.monto);
    Model.montoMovimiento = costoCosechaSemana; //Calculo de monto total por producto

    //Retenciones
    decimal retencionTotal = 0;
    if (editMode)
    {
        //Calculo de retenciones capturadas
    }else
    {
        Model.fechaMovimiento = Model.semanaLiquidada.endDate;
    }

    //Estado actual de finanzas del productor
    decimal balanceActual = ViewBag.balanceActual;

    //Datos para parcial de informacion de productor
    ViewDataDictionary vddProductorInfo = new ViewDataDictionary();
    vddProductorInfo.Add("temporada", Model.temporadaDeCosecha);

}
<p>
    <a href="@Url.Action("Details","Productores", new { id = productor.idProductor, temporada = Model.TemporadaDeCosechaID })">
        <i class="glyphicon glyphicon-arrow-left"></i> Ver Movimientos de este Productor
    </a>
</p>

@*Informacino de productor*@
@Html.Partial("../Productores/Partial_InfoProductor", productor, vddProductorInfo)

@*Datos globales*@
<div class="panel panel-primary">
    <div class="panel-heading">
        <h3 class="panel-title">
            <strong style="color: white">@(editMode ? "Editar" : "Registrar")</strong>
            <span>Liquidación Semanal</span>
        </h3>
    </div>
    <div class="panel-body">
        <div class="form-horizontal row">
            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            @*Forma para consulta de ingresos de cosecha por semana*@
            @using (Html.BeginForm("Create", "LiquidacionSemana", FormMethod.Get))
            {
                @Html.AntiForgeryToken()
                <div class="form-group col-md-3">
                    @Html.LabelFor(model => model.semanaLiquidada.startDate, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.semanaLiquidada.startDate, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.semanaLiquidada.startDate, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group col-md-3">
                    @Html.LabelFor(model => model.semanaLiquidada.endDate, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.semanaLiquidada.endDate, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.semanaLiquidada.startDate, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="form-group col-md-4">
                    @Html.LabelFor(model => model.precioDelDolarEnLiquidacion, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div id="divPrecioDelDolar" class="col-md-6">
                        @Html.EditorFor(model => model.precioDelDolarEnLiquidacion, new
                           {
                               htmlAttributes = new
                               {
                                   @class = "form-control",
                                   data_mask_reverse = "true",
                                   data_mask = "###0.0000"
                               }
                           })
                        @Html.ValidationMessageFor(model => model.precioDelDolarEnLiquidacion, "", new { @class = "text-danger" })
                    </div>
                    <div class="col-md-4">
                        <a class="satLogo" target="_blank"
                           href="http://www.sat.gob.mx/informacion_fiscal/tablas_indicadores/Paginas/tipo_cambio.aspx">
                            <img src="/images/sat_logo.png" />
                        </a>
                        <img id="loadingImg" src="~/images/loading.gif" class="hidden" />
                    </div>
                </div>

                <div class="form-group col-md-2 pull-right">
                    <button class="btn btn-primary">Buscar</button>
                </div>
            }
        </div>

        @*Ingreso de cosecha*@
        @Html.Partial("Partial_ReporteSemanalCosecha", ingresoSemanal)

        @using (Html.BeginForm("Create", "LiquidacionSemanal", FormMethod.Post))
        {
            @Html.HiddenFor(model => model.idMovimiento)
            @Html.HiddenFor(model => model.idProductor)
            @Html.HiddenFor(model => model.TemporadaDeCosechaID)
            @Html.AntiForgeryToken()

            @*Retenciones*@
            @Html.Partial("Partial_ReporteSemanalRetencionesForm", retenciones)

            @*Total a pagar*@
            <div class="panel panel-primary">
                <div class="panel-heading">
                    <h3 class="panel-title">Liquidación Semanal</h3>
                </div>
                <div class="panel-body">
                    @*Monto de cosecha*@
                    <div class="form-group col-md-4">
                        <label class = "control-label col-md-5">Monto Total por Cosecha (USD):</label>
                        <div class="col-md-7">
                            <input id="inputCostoCosechaSemana" class = "form-control"
                                   data-mask = "###0.00" data-mask-reverse = "true" 
                                   value="@costoCosechaSemana.ToString("C")" readonly/>
                        </div>
                    </div>
                    @*Menos*@
                    <span class="col-md-1" style="font-size:2em">-</span>

                    @*Retenciones*@
                    <div class="form-group col-md-3">
                        <label class="control-label col-md-5">Retenciones Totales (USD): </label>
                        <div class="col-md-7">
                            <input id="inputTotalRetencion" class="form-control"
                                   data-mask="###0.00" data-mask-reverse="true"
                                   value="@retencionTotal.ToString("C")" readonly />
                        </div>
                    </div>

                    @*Igual A*@
                    <span class="col-md-1" style="font-size:2em">=</span>

                    @*MOnto total a pagar*@
                    <div class="form-group col-md-3">
                        <label class="control-label col-md-5">Total a Pagar (USD): </label>
                        <div class="col-md-7">
                            @Html.EditorFor(model => model.montoMovimiento, new
                       {
                           htmlAttributes = new
                           {
                               @class = "form-control",
                               data_mask = "###0.00",
                               data_mask_reverse = "true",
                               @readonly="readonly"
                           }
                       })
                            @Html.ValidationMessageFor(model => model.montoMovimiento, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    @*Liquidacion*@

                    <div class="form-group col-md-4">
                        @Html.LabelFor(model => model.fechaMovimiento, htmlAttributes: new { @class = "control-label col-md-4" })
                        <div class="col-md-8">
                            @Html.EditorFor(model => model.fechaMovimiento, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.fechaMovimiento, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group col-md-4">
                        @Html.LabelFor(model => model.cheque, htmlAttributes: new { @class = "control-label col-md-4" })
                        <div class="col-md-8">
                            @Html.EditorFor(model => model.cheque, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.cheque, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        <div class="col-md-12">
                            <button class="btn btn-success">@(editMode ? "Guardar" : "Crear")</button>
                        </div>
                    </div>
                </div>
            </div>

            @*Adeudo acumulado*@
            <div class="panel panel-info">
                <div class="panel-heading">
                    <h3 class="panel-title">Saldo de Adeudo Acumulado</h3>
                </div>
                <div class="panel-body">
                    <div class="form-group col-md-4">
                        @Html.LabelFor(model => model.Productor.balanceActual, htmlAttributes: new { @class = "control-label col-md-4" })
                        <div class="col-md-8">
                            <input id="balanceActual" class="form-control"
                                   data-mask="###0.00" data-mask-reverse="true"
                                   value="@Model.Productor.balanceActual.ToString("C")" readonly />
                        </div>
                    </div>   

                    @*Menos*@
                    <span class="col-md-1" style="font-size:2em">-</span>

                    @*Retenciones*@
                    <div class="form-group col-md-3">
                        <label class="control-label col-md-5">Abono de la semana (USD): </label>
                        <div class="col-md-7">
                            <input id="inputAbonoSemana" class="form-control"
                                   data-mask="###0.00" data-mask-reverse="true"
                                   value="@retencionTotal.ToString("C")" readonly />
                        </div>
                    </div>

                    @*Igual A*@
                    <span class="col-md-1" style="font-size:2em">=</span>

                    @*MOnto total a pagar*@
                    <div class="form-group col-md-3">
                        <label class="control-label col-md-5">Saldo a Liquidar (USD): </label>
                        <div class="col-md-7">
                            <input id="inputSaldoLiquidar" class="form-control"
                                   data-mask="###0.00" data-mask-reverse="true"
                                   value="@retencionTotal.ToString("C")" readonly />
                        </div>
                    </div>
                </div>
            </div>
            }
    </div>
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script>
        $("#formRetenciones input").keyup(function () {
            var totalRetencion=0;
            $.each($("#formRetenciones input"), function (idx, item) {
                totalRetencion += Number($(item).val());
            });

            if ($(this).attr("id") == "abonoAnticipos") {
                $("#inputAbonoSemana").val($(this).val());
                var saldoPagar = $("#balanceActual").val() - $(this).val()
                $("#inputSaldoLiquidar").val(numeral(saldoPagar).format('0.00')).trigger('input');
            }

            $("#inputTotalRetencion").val(numeral(totalRetencion).format('0.00')).trigger('input');
            var totalAPagar = $("#inputCostoCosechaSemana").val() - totalRetencion;
            $("#montoMovimiento").val(numeral(totalAPagar).format('0.00')).trigger('input');

        })
        function recalcularMonto(tbRetencion) {
            var retencion = Number($(tbRetencion).val());
            $("#montoMovimiento").val(numeral(@Model.montoMovimiento -retencion)
                .format('0.00')).trigger('input');
        }

        function setPrecioDolar() {
            var antiForgeryToken = $("input[name=__RequestVerificationToken]").val();
            $("#loadingImg").toggleClass('hidden');

            //Se hace solicitud del precio del dolar al server
            getTipoCambioAsync(
                function (res) {
                    $("#precioDelDolarEnLiquidacion").val(numeral(res.precioDolar).format('0.0000')).trigger('input');
                    $('#precioDelDolarEnLiquidacion').attr('value', res.precioDolar);
                    precioDolar = res.precioDolar;
                    //recalcularMontoDolares();
                },
                function (err) { },
                function () {
                    $("#loadingImg").toggleClass('hidden');
                    $('#divPrecioDelDolar').removeClass('col-md-8');
                    $('#divPrecioDelDolar').addClass('col-md-9');
                }, antiForgeryToken)
        }
        setPrecioDolar();
    </script>
}
