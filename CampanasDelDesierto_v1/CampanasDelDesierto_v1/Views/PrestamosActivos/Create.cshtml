@using CampanasDelDesierto_v1.Models
@model CampanasDelDesierto_v1.Models.PrestamoActivo

@{
    ViewBag.Title = "Create";
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewBag.Message = "";


    ViewDataDictionary vdd = new ViewDataDictionary();
    vdd.Add("selectMode", true);

    bool editMode = Model.idPrestamoActivo > 0;
    ViewBag.Title = (editMode ? "Editar" : "Nuevo") + " Prestamo de Activo";
    Layout = "~/Views/Shared/_Layout.cshtml";

    Empleado Empleado = ViewBag.Empleado;
    List<ProductoActivo> ProductosActivos = ViewBag.ProductoActivoID;
    List<AdquisicionDeActivo> ActivosAdquiridos = null;
    if (editMode)
    {
        //Se obtiene las activos adquiridos para ser editadas
        ActivosAdquiridos = Model.AdquisicionDeActivos.ToList();
    }
    vdd.Add("prestamos", ActivosAdquiridos);

}
<p>
    <a href="@Url.Action("Details","Departamentos", new { id = Model.Empleado.departamentoID})">
        <i class="glyphicon glyphicon-arrow-left"></i>Regresar a lista de prestamos
    </a> 
</p>

<div class="panel panel-info">
    <div class="panel-heading">
        <h2 class="panel-title"><Strong>Empleado: </Strong>@(Model.Empleado.nombre+" "+Model.Empleado.apellidoPaterno+" "+Model.Empleado.apellidoMaterno)</h2>
    </div>
    <div class="panel-body">
        <div class="row">
            <dl class="dl-horizontal col-md-6">
                <dt>@Html.DisplayNameFor(model => model.Empleado.Departamento.nombreDepartamento)</dt>
                <dd>@Html.DisplayFor(model => model.Empleado.Departamento.nombreDepartamento) </dd>

                <dt> @Html.DisplayNameFor(model => model.Empleado.Departamento.Sucursal.nombreSucursal)</dt>
                <dd> @Html.DisplayFor(model => model.Empleado.Departamento.Sucursal.nombreSucursal) </dd>
            </dl>
            <dl class="dl-horizontal col-md-6">
                <dt>@Html.DisplayNameFor(model => model.Empleado.nombreCompleto)</dt>
                <dd>@Html.DisplayFor(model => model.Empleado.nombreCompleto) </dd>
            </dl>
        </div>

        <a href="@Url.Action("Edit","Empleados",new { id = Model.idEmpleado })">
            <i class="glyphicon glyphicon-pencil"></i> Editar
        </a>    
    </div>
</div>
@Html.Partial("Partial_ListaProductosActivos", ProductosActivos, vdd)

<div id="mensajes" class="container"></div><br />

<div class="panel panel-primary">
    <div class="panel-heading">
        <h3 class="panel-title">Nuevo Prestamo</h3>
    </div>
    <div class="panel-body">
        @using (Html.BeginForm())
        {
            @Html.AntiForgeryToken()<br />
            @Html.HiddenFor(model => model.idEmpleado)<br />
            @Html.Hidden("Activos_AD")
            <div class="form-horizontal">
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                <div class="form-group">
                    @Html.LabelFor(model => model.fechaPrestamoActivo, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.fechaPrestamoActivo, new { htmlAttributes = new { @class = "form-control", id = "FechaI", onchange = "validacionFechas()" } })
                        @Html.ValidationMessageFor(model => model.fechaPrestamoActivo, "", new { @class = "text-danger" })
                    </div>
                </div>                

                <div class="form-group">
                    @Html.LabelFor(model => model.fechaEntregaActivo, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.fechaEntregaActivo, new { htmlAttributes = new { @class = "form-control", id = "FechaF", onchange = "validacionFechas2()" } })
                        @Html.ValidationMessageFor(model => model.fechaEntregaActivo, "", new { @class = "text-danger" })
                    </div>
                </div>
               
                <div class="form-group">
                    <div class="col-md-offset-2 col-md-10">
                        <button disabled type="submit" id="crear" class="btn btn-success">Crear</button>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    @Scripts.Render("~/bundles/dataTables.select")
    @Styles.Render("~/Content/dataTables.select")   

    <script>

        var COLS_ENUM = Object.freeze({ ID: 1, noSerie: 2, Descripcion: 3 })
        var table = $('#Activos').DataTable({
            columnDefs: [{
                orderable: false,
                className: 'select-checkbox',
                targets: 0
            }, {
                visible: false,
                searchable: false
            }],
            select: {
                style: 'os',
                selector: 'td:first-child'
            },
            order: [[1, 'asc']]
        });

        table.on('select', function (e, dt, type, indexes) {
            var selRow = dt.data();
            agregarSeleccion(selRow)
            funcionRecalcularMontos();
            console.log(compras)
        }).on('deselect', function (e, dt, type, indexes) {
            var unSelRows = dt.data();
            removerSeleccion(unSelRows);
            funcionRecalcularMontos();
            console.log(compras)
        });

        //Data table select sigle row
        var compras = new Array();

        //Metodo que agrega del estado de compras los elementos desseleccionados
        function agregarSeleccion(rows) {
            var renglones = new Array();
            if (!rows.rows) { //Si es un solo elemento
                var inputCantidad = rows[COLS_ENUM.ID];
                introducirNuevaCantidad(inputCantidad);
            } else { //Si son varios
                renglones = rows;
                //selectedIngresosIDs = new Array();
                $.each(renglones, function (idx, row) {
                    //compras.push(row[COLS_ENUM.ID])
                    var inputCantidad = rows[COLS_ENUM.ID];
                    introducirNuevaCantidad(inputCantidad);
                })
            }
        }

        function validarCantidades() {

        }

        //Metodo que elimina del estado de compras los elementos desseleccionados
        function removerSeleccion(rows) {
            var renglonesAEliminar = new Array();
            if (!rows.rows) {
                renglonesAEliminar.push(rows);
            } else {
                renglonesAEliminar = rows;
            }
            $.each(renglonesAEliminar, function (idx, row) {
                compras = $.grep(compras, function (item, idx) {
                    return item.ProductoActivoID == row[COLS_ENUM.ID]
                }, true)
            })
        }

        //Recalcula el total de la venta segun los costos de cantidad de material comprado
        //selecciondos en la tabla
        function funcionRecalcularMontos() {
            /*var selectedRows = table.rows({ selected: true });
            var data = selectedRows.data();*/      

            //var cantidad = $('#cantidadMaterial').val();
            if (compras.length == 0)
                $('#crear').attr('disabled', true);
            else
            {               
                $('#crear').attr('disabled', false);
            }
            $('#Activos_AD').val(JSON.stringify(compras))
        }

        function introducirNuevaCantidad(inputCantidad) {
            var selRow = buscarRenglonSeleccionado(inputCantidad)
            //Se el input editado se encontraba seleccionado
            if (selRow)
                nuevoRenglonDeCompras(selRow, inputCantidad)
        }

        function nuevoRenglonDeCompras(selRow, inputCantidad) {
            //var cantidadActivo = inputCantidad ? inputCantidad.valueAsNumber : Number($(selRow[COLS_ENUM.CANTIDAD]).val());
            //Se agrega el nuevo elemento al arreglo
            var newItem = {
                ProductoActivoID: selRow[COLS_ENUM.ID],
                noSerie: selRow[COLS_ENUM.noSerie],
                Descripcion: selRow[COLS_ENUM.Descripcion]                
            };
            compras.push(newItem);
        }

        function editarElemento(inputEditado) {
            var selRow = buscarRenglonSeleccionado(inputEditado);
            if (selRow) {
                var compraIDX
                $.each(compras, function (idx, item) {
                    if (selRow[COLS_ENUM.ID] == item.ProductoActivoID)
                        compraIDX = idx;
                })
                compras[compraIDX].cantidadActivo = inputEditado.valueAsNumber;

                console.log(JSON.stringify(compras));
            }

            funcionRecalcularMontos();
        }

        function buscarRenglonSeleccionado(input) {
            //Se toman los datos de los renglones seleccionados
            var selectedRows = table.rows({ selected: true });
            var data = selectedRows.data()

            //Se busca si el input editado se encuentra seleccionado
            var selRow = $.grep(data, function (item, idx) {
                return item[COLS_ENUM.ID] == input;
            })[0];

            return selRow;
        }
</script>

@if (editMode)
{
    <script>
        $('#Activos').DataTable().table().rows('[default-selected]').select();

        inicializarListadoDeActivosAdquiridos();

        function inicializarListadoDeActivosAdquiridos() {
            var selectedRows = table.rows({ selected: true });
            var data = selectedRows.data();
            activosAdquiridos = new Array();
            $.each(data, function (idx, item) {
                nuevoRenglonDeActivosAdquiridos(item)
            })
        }
    </script>
    }
}

