@using CampanasDelDesierto_v1.HerramientasGenerales
@model IEnumerable<CampanasDelDesierto_v1.Models.Producto>

@{
    ViewBag.Title = "Lista de Productos";
    Layout = "~/Views/Shared/_Layout.cshtml";
    List<ExcelTools.ExcelParseError> erroresExcel = ViewBag.erroresExcel;
    ExcelTools.ExcelParseError errorGeneral = ViewBag.errorGeneral;

    string errorMsgPrimario = "";
    string erroresModalID = "";
    if (erroresExcel != null)
    {
        errorMsgPrimario = "Se presentaron <strong>" + erroresExcel.Count() + " errores</strong> al importar el documento Excel."
            + " Revise la tabla de errores de importación en la parte inferior.";
    }
    if (errorGeneral != null && errorGeneral.isError)
    {
        errorMsgPrimario = errorGeneral + "<br>" + errorMsgPrimario;
    }
}

<h2>@ViewBag.Title</h2>

<a href="@Url.Action("Create")">
    <i class="fa fa-plus-circle"></i> Registrar Nuevo
</a> |
<a href="#" onclick="$('#formImportExcel').slideToggle()">
    <i class="fa fa-file-excel-o"></i> Importar de Excel
</a>
@using (Html.BeginForm(null, null, FormMethod.Post, new { enctype = "multipart/form-data",
    @class = "form-inline",  id = "formImportExcel",  style = "display:none" }))
{
    @Html.ValidationSummary()
    <div class="row">
        <div class="col-md-12">
            <label for="xlsFile">Importar de Excel</label>
            <input id="xlsFile" name="xlsFile" type="file" class="form-control"
                   accept="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" />
            <button class="btn btn-success">
                <i class="fa fa-upload"></i> Subir
            </button>
            <i class="fa fa-question-circle helpIcon"
               onclick="$('#msgAyudaImportacion').slideToggle();
                 $(this).toggleClass('clicked')"
               style="cursor: pointer"></i>
        </div>
        <div id="msgAyudaImportacion" style="display: none;" class="col-md-12 alert alert-info">
            Para importar la información de los productores, cargue un archivo excel con la estructura
            mostrada en la siguiente imagen, respete el orden de las columnas. No es necesario
            que el nombre de las columnas sea el mismo. <br />
            <div style="text-align: center">
                <img style="border: 1px solid; margin: 1em auto"
                     src="~/images/materiales/excel_materiales.png" />
            </div>
            El sistema buscará en la base de datos los productos con el mismo nombre que 
            marque el archivo Excel.
            <ul>
                <li>
                    <strong>En caso de encontrarlo</strong>, el registro de la base de datos es modificado acorde al Excel.
                </li>
                <li>
                    <strong>En caso de no encontrarlo</strong>, se creará un nuevo registro de producto
                    con las datos del archivo Excel.
                </li>
            </ul>
        </div>
    </div>
}
<br />
<table class="table table-hover table-striped">
    <tr>
        <th>
            @Html.DisplayNameFor(model => model.nombreProducto)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.costo)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.abreviacionUM)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.descripcion)
        </th>
        <th></th>
    </tr>

    @if (Model.Count() > 0) {
        foreach (var item in Model.OrderBy(prod => prod.nombreProducto))
        {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.nombreProducto)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.costo)
            </td>
            <td>
                @item.abreviacionUM
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.descripcion)
            </td>
            <td>
                <a href="@Url.Action("Edit", "Productos", new { id = item.idProducto })">
                    <i class="glyphicon glyphicon-pencil"></i> Editar
                </a><br />
                <a href="@Url.Action("Delete", "Productos", new { id = item.idProducto })">
                    <i class="glyphicon glyphicon-remove"></i> Eliminar
                </a>


            </td>
        </tr>
        }
    }
    else
    {
        <tr>
            <td colspan="5">
                <div class="alert alert-info">
                    No hay productos registrados.
                </div>
            </td>
        </tr>
    }

</table>


@if (!String.IsNullOrEmpty(errorMsgPrimario))
{
    erroresModalID = "importExcelErrorMessage";
    ViewDataDictionary vdd = new ViewDataDictionary();
    vdd.Add("erroresModalID", erroresModalID);
    vdd.Add("errorMsgPrimario", errorMsgPrimario);
    <div>
        @Html.Partial("../Shared/Partial_ExcelErrors", erroresExcel, vdd);
    </div>
}


@section Scripts{
    @if (erroresExcel != null && erroresExcel.Count() > 0)
    {
        <script>
            $('@("#"+ erroresModalID)').modal();
        </script>
    }
}