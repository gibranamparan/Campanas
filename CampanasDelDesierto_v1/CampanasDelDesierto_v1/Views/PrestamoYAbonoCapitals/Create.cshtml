@using CampanasDelDesierto_v1.Models
@using System;
@model CampanasDelDesierto_v1.Models.PrestamoYAbonoCapital

@{
    ViewBag.Title = "Nuevo Anticipo O Abono";
    Layout = "~/Views/Shared/_Layout.cshtml";

    Productor productor = ViewBag.productor;

    @*
        /*Just for test*/
        Random random = new Random();
        // decimal montoMovimientoPesos = random.Next(1,10)*50*100;
        const string chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
        Model.cheque = new string(Enumerable.Repeat(chars, 5)
          .Select(s => s[random.Next(s.Length)]).ToArray());
        Model.pagare = new string(Enumerable.Repeat(chars, 5)
          .Select(s => s[random.Next(s.Length)]).ToArray());
    *@

}

<p>
    <a href="@Url.Action("Details","Productores", new { id = productor.idProductor, temporada = Model.TemporadaDeCosechaID })">
        <i class="glyphicon glyphicon-arrow-left"></i> Ver Movimientos de este Productor
    </a>
</p>
@Html.Partial("../Productores/Partial_InfoProductor", productor)

<div class="panel panel-primary">
    <div class="panel-heading">
        Nuevo Anticipo o Abono
    </div>
    <div class="panel-body">
        @using (Html.BeginForm())
        {
            @Html.AntiForgeryToken()
            @Html.HiddenFor(model => model.idProductor)
            @Html.HiddenFor(model => model.TemporadaDeCosechaID)
            <div class="form-horizontal">
                <div class="alert alert-info">
                    <strong>@Html.DisplayNameFor(model => model.temporadaDeCosecha.rangoTiempo) de Temporada: </strong>@Html.DisplayFor(model => model.temporadaDeCosecha.rangoTiempo).
                </div>
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                <div class="form-group col-md-6">
                    @Html.LabelFor(model => model.montoMovimiento, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.montoMovimiento, new{
                            htmlAttributes = new
                            {
                                @class = "form-control",
                                data_mask = "###0.00",
                                data_mask_reverse = "true",
                                @readonly = "readonly"
                            }})
                        @Html.ValidationMessageFor(model => model.montoMovimiento, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group col-md-6">
                    @Html.LabelFor(model => model.divisa, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.DropDownListFor(mode => Model.divisa, new SelectList(PrestamoYAbonoCapital.getDivisasArray(), "Text", "Value"), new { @class = "form-control" })
                        @Html.ValidationMessageFor(model => model.divisa, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div id="conversionDivisa" class="row">

                    <div class="form-group col-md-6">
                        @Html.LabelFor(model => model.montoPesos, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.montoPesos, new
                           {
                               htmlAttributes = new
                               {
                                   @class = "form-control",
                                   data_mask = "###0.00",
                                   data_mask_reverse = "true",
                               }
                           })
                            @Html.ValidationMessageFor(model => model.montoPesos, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-group col-md-6">
                        @Html.LabelFor(model => model.precioDelDolar, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div id="divPrecioDelDolar" class="col-md-8">
                            @Html.EditorFor(model => model.precioDelDolar, new{
                               htmlAttributes = new
                               {
                                   @class = "form-control",
                                   data_mask_reverse = "true",
                                   data_mask = "###0.0000"
                               }})
                            @Html.ValidationMessageFor(model => model.precioDelDolar, "", new { @class = "text-danger" })
                        </div>
                        <a class="satLogo" target="_blank"
                           href="http://www.sat.gob.mx/informacion_fiscal/tablas_indicadores/Paginas/tipo_cambio.aspx">
                            <img src="/images/sat_logo.png" />
                        </a>
                        <img id="loadingImg" src="~/images/loading.gif" class="hidden" />
                    </div>
                </div>

                <div class="form-group col-md-6">
                    @Html.LabelFor(model => model.fechaMovimiento, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.fechaMovimiento, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.fechaMovimiento, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group col-md-6">
                    @Html.LabelFor(model => model.tipoDeMovimientoDeCapital, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.DropDownListFor(x => x.tipoDeMovimientoDeCapital, new SelectList(PrestamoYAbonoCapital.getTipoMovimientoCapitalArray(), "Value", "Text"),
                new { @class = "form-control" })
                    </div>
                </div>

                <div id="formGroupDeuda" class="row" style="display:none">

                    <div class="form-group col-md-6">
                        @Html.LabelFor(model => model.cheque, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.cheque, new { htmlAttributes = new { @class = "form-control", oninput= "$(this).val($(this).val().toUpperCase())" } })
                            @Html.ValidationMessageFor(model => model.cheque, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group col-md-6">
                        @Html.LabelFor(model => model.pagare, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.pagare, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.pagare, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-group col-md-6">
                        @Html.LabelFor(model => model.fechaPagar, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.fechaPagar, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.fechaPagar, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group col-md-6">
                        @Html.LabelFor(model => model.concepto, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.DropDownListFor(model=>model.concepto, PrestamoYAbonoCapital.getConceptosSelectList(),"Ninguno", 
                                htmlAttributes: new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.concepto, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group col-md-6">
                        @Html.LabelFor(model => model.proveedor, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.DropDownList("proveedor", null, htmlAttributes: new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.proveedor, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div id="detallesCFE" class="form-group col-md-6" style="display:none">
                        @Html.LabelFor(model => model.pozo, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.pozo, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.pozo, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group row col-md-12">
                        @Html.LabelFor(model => model.descripcionConcepto)
                        <div class="col-md-12">
                            @Html.EditorFor(model => model.descripcionConcepto, 
                           new { htmlAttributes = new { @class = "form-control col-md-12", style="resize:vertical" } })
                            @Html.ValidationMessageFor(model => model.descripcionConcepto, "", new { @class = "text-danger" })
                        </div>
                    </div>

                </div>

                <div class="form-group">
                    <div class="col-md-10">
                        <button type="submit" class="btn btn-success">Crear</button>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script>
        $().ready(function () {
            $("#tipoDeMovimientoDeCapital").change(function () {
                if ($(this).val() == "@PrestamoYAbonoCapital.TipoMovimientoCapital.PRESTAMO")
                    $("#formGroupDeuda").slideDown();
                else
                    $("#formGroupDeuda").slideUp();

                $("#proveedor").trigger("change");
            })

            $("#montoPesos").keyup(function () {
                recalcularMontoDolares();
            })

            $("#precioDelDolar").keyup(function () {
                recalcularMontoDolares();
            })

            $("#montoMovimiento").keyup(function () {
                recalcularMontoPesos();
            })

            $('#divisa').change(function () {
                var pesosSelected = $(this).val() == '@PrestamoYAbonoCapital.Divisas.MXN';
                $("#montoMovimiento").prop('readonly', pesosSelected); //Activa dolares
                $("#montoPesos").prop('readonly', !pesosSelected); //Desactiva pesos

                //$('#conversionDivisa').slideToggle(pesosSelected);

                $("#montoMovimiento").val(numeral(0).format('0.00')).trigger('input');
                $("#montoPesos").val(numeral(0).format('0.00')).trigger('input');
            })

            $("#proveedor").change(function () {
                var prov = $(this).val();
                $("#detallesCFE").slideDownOrUp(prov=='CFE')
            })

            function setPrecioDolar() {
                var antiForgeryToken = $("input[name=__RequestVerificationToken]").val();
                $("#loadingImg").toggleClass('hidden');

                //Se hace solicitud del precio del dolar al server
                getTipoCambioAsync(
                    function (res) {
                        $("#precioDelDolar").val(numeral(res.precioDolar).format('0.0000')).trigger('input');
                        $('#precioDelDolar').attr('value', res.precioDolar);
                        precioDolar = res.precioDolar;
                        recalcularMontoDolares();
                    },
                    function (err) { },
                    function () {
                        $("#loadingImg").toggleClass('hidden');
                        $('#divPrecioDelDolar').removeClass('col-md-8');
                        $('#divPrecioDelDolar').addClass('col-md-9');
                    }, antiForgeryToken)
            }

            function recalcularMontoDolares() {
                var montoPesos = $("#montoPesos").val();
                var precioDolar = $("#precioDelDolar").val()
                //var num = Math.trunc((montoPesos / precioDolar) * 100) / 100
                var num = montoPesos / precioDolar;
                $('#montoMovimiento')
                    .val(numeral(num).format('0.00')).trigger('input');
                $('#montoMovimiento').attr('value',num);
            }

            function recalcularMontoPesos() {
                var montoDolares = $("#montoMovimiento").val();
                var precioDolar = $("#precioDelDolar").val()
                var num = Math.trunc(Math.round(montoDolares * precioDolar * 100)) / 100;
                $('#montoPesos').val(numeral(num).format('0.00')).trigger('input');
                $('#montoPesos').attr('value', num);
            }

            setPrecioDolar();
        })

    </script>
}
