@model CampanasDelDesierto_v1.Models.PagoPorProducto
@using CampanasDelDesierto_v1.Models
@using CampanasDelDesierto_v1.HerramientasGenerales

@{
    //Se esta editando un movimiento si esta tiene ID primario
    bool editMode = Model.idMovimiento > 0;
    ViewBag.Title = (editMode ? "Editar" : "Nuevo") + " Pago por Producto";

    Layout = "~/Views/Shared/_Layout.cshtml";

    //Se deteminar productor, temporada e ingresos asociados al movimiento
    Productor productor = ViewBag.productor == null? Model.Productor: ViewBag.productor;
    List<RecepcionDeProducto> ingresos = ViewBag.ingresosProducto; //En caso de ser nuevo, es una lista vacia
    
    /*Datos para partial de detalles de temporada*/
    ViewDataDictionary vdd = new ViewDataDictionary();
    vdd.Add("selectMode", true);
    ViewDataDictionary vddDetailsTemporada = new ViewDataDictionary();
    vddDetailsTemporada.Add("editable", true);
    string funcionRecalcularMontos = "recalcularMontos";
    vddDetailsTemporada.Add("funcionAlReestablecer", funcionRecalcularMontos);
    if (editMode)
    {
        vddDetailsTemporada.Add("pagoPorProducto", Model);
    }
    vddDetailsTemporada.Add("productorID", productor.idProductor);

    /*Modelo para la forma de creacion de nueva recepcion*/
    RecepcionDeProducto nuevaRecepcion = new RecepcionDeProducto { idProductor= productor.idProductor,
        TemporadaDeCosechaID = Model.TemporadaDeCosechaID, numProductor = productor.numProductor };
    ViewDataDictionary vddPartialCreacion = new ViewDataDictionary();
    string funcionProcesarRespuestaCreacion = "procesarRespuestaCreacion";
    vddPartialCreacion.Add("funcionRespuesta", funcionProcesarRespuestaCreacion);
    VMConfirmModalAttributes modalOptsnuevaRecepcion = new VMConfirmModalAttributes
    {
        modalTitle = "Nuevo Registro de Recepcion de Producto",
        action = "create",
        controller = "RecepcionDeProductos",
        callType = VMConfirmModalAttributes.CallType.PARTIAL_VIEW,
        modalID = "mdlCreateRecepcion",
        primaryMessage = "Rellena la forma para crear ingresar manualmente un nuevo registro de recepcion de producto",
        modalStyle = new VMConfirmModalAttributes.Style(VMConfirmModalAttributes.Style.StyleTypes.INFO),
        size = new VMConfirmModalAttributes.Size(VMConfirmModalAttributes.Size.ModalSize.LARGE),
        partialViewURL = "../RecepcionDeProductos/Partial_CreateRecepcionProducto",
        modelForPartial = nuevaRecepcion,
        datosDeVista = vddPartialCreacion
    };

    VMConfirmModalAttributes modalOptsEliminarRecepcion = new VMConfirmModalAttributes
    {
        modalTitle = "Eliminar Registros Seleccionados",
        callType = VMConfirmModalAttributes.CallType.PARTIAL_VIEW,
        modalID = "mdlDeleteRecepcion",
        primaryMessage = "Al confirmar este mensaje, eliminará todos los elementos seleccionados en la tabla.",
        modalStyle = new VMConfirmModalAttributes.Style(VMConfirmModalAttributes.Style.StyleTypes.DANGER),
        size = new VMConfirmModalAttributes.Size(VMConfirmModalAttributes.Size.ModalSize.SMALL),
        partialViewURL = "../RecepcionDeProductos/Partial_ConfirmEliminarProductos",
        modelForPartial = nuevaRecepcion,
    };
}

<p>
    <a href="@Url.Action("Details","Productores", new { id = productor.idProductor,
            temporada = Model.TemporadaDeCosechaID })">
        <i class="glyphicon glyphicon-arrow-left"></i> Ver Movimientos de este productor
    </a>
</p>

@*Panel de informacion general del productor*@
@Html.Partial("../Productores/Partial_InfoProductor", productor)

@*Tabla donde se encuentran todos los ingresos de producto reportados*@
<h4>Acumulado de recepción de aceituna 
    <i class="fa fa-question-circle helpIcon" 
            onclick='$("#msgAcumuladoRecepcion").slideToggle();
                    $(this).toggleClass("clicked")'
            style="cursor:pointer">
    </i>
</h4>
<div id="msgAcumuladoRecepcion" class="alert alert-info" style="display:none">
    En esta tabla se muestran los <strong>registros de recepción de aceituna</strong> que no han sido asociados a un pago.
    <ul>
        <li>Haga <strong>click en las cajas de selección</strong> de la primera columna para seleccionar una recepción a la cual quiera reportar su pago.</li>
        <li>
            Para <strong>seleccionar más de una</strong>, presione la tecla <strong>CTRL</strong> 
            mientras hace click sobre cada una de las recepciones que desea agrupar sobre un mismo pago.
        </li>
        <li>
            Para seleccionar un <strong>rango de registros</strong> de recepción, seleccione un registro y mientras presiona la tecla <strong>SHIFT</strong>,
            seleccione el último elemento del rango.
        </li>
        <li>
            Puede utilizar los botones de <strong>"Seleccionar Todos"</strong> o <strong>"Limpiar"</strong> 
            que se encuentran en la forma de registro de la parte inferior.
        </li>
    </ul>
</div>

@if(!editMode){ 
<div>
    <button class="btn btn-info" data-toggle="modal" data-target="#@modalOptsnuevaRecepcion.modalID">Nuevo</button>
    <button id="btnEliminarRecepciones" class="btn btn-danger"
            data-toggle="modal" data-target="#@modalOptsEliminarRecepcion.modalID"
            disabled>
        Eliminar
    </button>
</div>
}

@Html.Partial("Partial_ConfirmationModal", modalOptsnuevaRecepcion)
@Html.Partial("Partial_ConfirmationModal", modalOptsEliminarRecepcion)
@Html.Partial("Partial_ListaIngresosProducto", ingresos, vdd)

<br />
@using (Html.BeginForm())
{
    <div>
        @Html.Partial("../TemporadaDeCosechas/Partial_DetailsTemporada", 
       new TemporadaDeCosecha.VMPreciosProductos(Model.temporadaDeCosecha,productor.zona), vddDetailsTemporada)
    </div>

    <div class="panel panel-primary">
        <div class="panel-heading">
            <strong style="color: white">@(editMode ? "Edición" : "Creación")</strong><span> de Registro Ingreso de Producto</span>
        </div>
        <div class="panel-body">
            <div class="form-horizontal" id="formNuevoPagoProducto">
                @Html.AntiForgeryToken()
                @Html.HiddenFor(model => model.idMovimiento)
                @Html.HiddenFor(model => model.idProductor)
                @Html.HiddenFor(model => model.TemporadaDeCosechaID)
                @Html.Hidden("selectedIngresos","",new { @class= "selectedIngresos" })

                @Html.ValidationSummary("", new { @class = "text-danger" })
                <div class="form-group col-md-4">
                    @Html.LabelFor(model => model.fechaMovimiento, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.fechaMovimiento, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.fechaMovimiento, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group col-md-4">
                    @Html.LabelFor(model => model.montoMovimiento, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.montoMovimiento, new
                   {
                       htmlAttributes = new
                       {
                           @class = "form-control",
                           data_mask = "###0.00",
                           data_mask_reverse = "true",
                           @readonly = "readonly"
                       }
                   })
                        @Html.ValidationMessageFor(model => model.montoMovimiento, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group col-md-4">
                    @Html.LabelFor(model => model.semana, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.semana, new { htmlAttributes = new { @class="form-control", min = 0 } })
                        @Html.ValidationMessageFor(model => model.semana, "", new { @class = "text-danger" })
                    </div>
                </div>
                <fieldset class="col-md-12">
                    <legend></legend>
                    @***PRODUCTO 1***@
                    <div class="form-group col-md-6">
                        @Html.LabelFor(model => model.cantidadProducto1, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.cantidadProducto1, new
                       {
                           htmlAttributes = new
                           {
                               @class = "form-control",
                               data_mask = "###0.000",
                               data_mask_reverse = "true",
                               @readonly = "readonly"
                           }
                       })
                            @Html.ValidationMessageFor(model => model.cantidadProducto1, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group col-md-6">
                        @Html.LabelFor(model => model.pagoProducto1, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.pagoProducto1, new
                       {
                           htmlAttributes = new
                           {
                               @class = "form-control",
                               data_mask = "###0.00",
                               data_mask_reverse = "true",
                               @readonly = "readonly"
                           }
                       })
                            @Html.ValidationMessageFor(model => model.pagoProducto1, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    @***PRODUCTO 2***@
                    <div class="form-group col-md-6">
                        @Html.LabelFor(model => model.cantidadProducto2, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.cantidadProducto2, new
                       {
                           htmlAttributes = new
                           {
                               @class = "form-control",
                               data_mask = "###0.000",
                               data_mask_reverse = "true",
                               @readonly = "readonly"
                           }
                       })
                            @Html.ValidationMessageFor(model => model.cantidadProducto2, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-group col-md-6">
                        @Html.LabelFor(model => model.pagoProducto2, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.pagoProducto2, new
                       {
                           htmlAttributes = new
                           {
                               @class = "form-control",
                               data_mask = "###0.00",
                               data_mask_reverse = "true",
                               @readonly = "readonly"
                           }
                       })
                            @Html.ValidationMessageFor(model => model.pagoProducto2, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    @***PRODUCTO 3***@
                    <div class="form-group col-md-6">
                        @Html.LabelFor(model => model.cantidadProducto3, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.cantidadProducto3, new
                       {
                           htmlAttributes = new
                           {
                               @class = "form-control",
                               data_mask = "###0.000",
                               data_mask_reverse = "true",
                               @readonly = "readonly"
                           }
                       })
                            @Html.ValidationMessageFor(model => model.cantidadProducto3, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group col-md-6">
                        @Html.LabelFor(model => model.pagoProducto3, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.pagoProducto3, new
                       {
                           htmlAttributes = new
                           {
                               @class = "form-control",
                               data_mask = "###0.00",
                               data_mask_reverse = "true",
                               @readonly = "readonly"
                           }
                       })
                            @Html.ValidationMessageFor(model => model.pagoProducto3, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </fieldset>
                <div class="form-group col-md-12">
                    <div class="col-md-10">
                        <button class="btn btn-success" id="btnRegistrar" @(ingresos != null || ingresos.Count() == 0 ? "disabled" : "")>
                            @(editMode?"Guardar" : "Registrar")
                        </button>
                        <button class="btn btn-info" type="button" onclick="limpiarSeleccionIngresos()">Limpiar</button>
                        <button class="btn btn-info" type="button" onclick="seleccionarTodosIngresos()">Seleccionar Todos</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
}
@section Scripts{
<script>
    var selectorInputsPrecios = "#formCostosProducto input#precio";
    var selectedIngresosIDs = new Array();

    @*Enumeracion de cada columna del datatable*@
    var COLS_ENUM = Object.freeze({ID:1, PROD1: 3, PROD2: 4, PROD3: 5, SEMANA:7})

    @*Definicion de la tabla*@
    var tblIngresoAcumulado = $('#tblIngresoAcumulado').DataTable({
        columnDefs: [{
            orderable: false,
            className: 'select-checkbox',
            targets: 0
        }, {
            @*Se hace invisible la columna de ID's*@
            targets: COLS_ENUM.ID,
            visible: false,
            searchable: false
        }],
        select: {
            style: 'os',
            selector: 'td:first-child'
        },
        order: [[COLS_ENUM.SEMANA, 'asc']]
    });
    @*Declaracion de evento de selecicon de renglon*@
    tblIngresoAcumulado.on('select',function(e, dt, type, indexes){
        @(funcionRecalcularMontos)();
        var noSemana
        if(dt.data()[0])
            noSemana = dt.data()[0][COLS_ENUM.SEMANA]
        else
            noSemana = dt.data()[COLS_ENUM.SEMANA]
        $("#formNuevoPagoProducto input#semana").val(noSemana)
    })
    @*Declaracion de evento de selecicon de renglon*@
    .on('deselect',function(e, dt, type, indexes){
        @(funcionRecalcularMontos)();
    });

    function @(funcionRecalcularMontos)() {
        selectedIngresosIDs = new Array();
        var selectedRows = tblIngresoAcumulado.rows({selected:true});
        var data = selectedRows.data();
        var totalCant1 = 0, totalCant2 = 0, totalCant3 = 0, montoNeto = 0;

        @*Se toman los costos por tipo de producto marcado para esta temporada*@
        var precioProducto1 = $(selectorInputsPrecios+"Manzanita").val();
        var precioProducto2 = $(selectorInputsPrecios+"Obliza").val();
        var precioProducto3 = $(selectorInputsPrecios+"Mission").val();

        for(var c=0;c<data.length;c++){
            totalCant1 += Number(data[c][COLS_ENUM.PROD1]);
            totalCant2 += Number(data[c][COLS_ENUM.PROD2]);
            totalCant3 += Number(data[c][COLS_ENUM.PROD3]);
            selectedIngresosIDs.push(Number(data[c][COLS_ENUM.ID]));
        }
        var pp1 = totalCant1*precioProducto1, pp2 = totalCant2*precioProducto2, pp3 = totalCant3*precioProducto3;
        $("#cantidadProducto1").val(numeral(totalCant1).format('0.000')).trigger('input');
        $("#cantidadProducto2").val(numeral(totalCant2).format('0.000')).trigger('input');
        $("#cantidadProducto3").val(numeral(totalCant3).format('0.000')).trigger('input');
        $("#pagoProducto1").val(numeral(pp1).format('0.00')).trigger('input');
        $("#pagoProducto2").val(numeral(pp2).format('0.00')).trigger('input');
        $("#pagoProducto3").val(numeral(pp3).format('0.00')).trigger('input');
        $("#montoMovimiento").val(numeral(pp1 + pp2 + pp3).format('0.00')).trigger('input');

        $("#btnRegistrar").attr('disabled', data.length == 0)
        $("#btnEliminarRecepciones").attr('disabled', data.length == 0)

        console.log(JSON.stringify(selectedIngresosIDs))
        $('.selectedIngresos').val(JSON.stringify(selectedIngresosIDs))
    }

    function limpiarSeleccionIngresos(){
        $('#tblIngresoAcumulado').DataTable().table().rows().deselect();
    }

    function seleccionarTodosIngresos(){
        $('#tblIngresoAcumulado').DataTable().table().rows().select();
    }

    $("#formCostosProducto input").keyup(function(){
        @(funcionRecalcularMontos)();
    })

    function @(funcionProcesarRespuestaCreacion)(res){
        location.reload();
    }
</script>


@if (editMode)
    {
        <script>
            $('#tblIngresoAcumulado').DataTable().table().rows('[default-selected]').select();
        </script>
    }
}