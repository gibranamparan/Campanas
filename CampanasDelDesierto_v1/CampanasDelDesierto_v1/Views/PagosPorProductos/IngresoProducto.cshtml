@model CampanasDelDesierto_v1.Models.PagoPorProducto
@using CampanasDelDesierto_v1.Models
@using CampanasDelDesierto_v1.HerramientasGenerales

@{
    //Se esta editando un movimiento si esta tiene ID primario
    bool editMode = Model.idMovimiento > 0;
    ViewBag.Title = (editMode ? "Editar" : "Nuevo") + " Pago por Producto";

    Layout = "~/Views/Shared/_Layout.cshtml";

    //Se deteminar productor, temporada e ingresos asociados al movimiento
    Productor productor = ViewBag.productor == null? Model.Productor: ViewBag.productor;
    List<RecepcionDeProducto> ingresos = ViewBag.ingresosProducto; //En caso de ser nuevo, es una lista vacia

    /*Datos para partial de detalles de temporada*/
    ViewDataDictionary vdd = new ViewDataDictionary();
    vdd.Add("selectMode", true);
    bool showOpts = false;
    
ViewDataDictionary vddDetailsTemporada = new ViewDataDictionary();
    vddDetailsTemporada.Add("editable", true);
    string funcionRecalcularMontos = "recalcularMontos";
    vddDetailsTemporada.Add("funcionAlReestablecer", funcionRecalcularMontos);
    if (editMode)
    {
        vddDetailsTemporada.Add("pagoPorProducto", Model);
    }
    vddDetailsTemporada.Add("productorID", productor.idProductor);

    /*Modelo para la forma de creacion de nueva recepcion*/
    RecepcionDeProducto nuevaRecepcion = new RecepcionDeProducto { idProductor= productor.idProductor,
        TemporadaDeCosechaID = Model.TemporadaDeCosechaID, numProductor = productor.numProductor, nombreProductor = productor.nombreProductor };
    ViewDataDictionary vddPartialCreacion = new ViewDataDictionary();
    var selListProductores = ViewBag.productores;
    string funcionProcesarRespuestaCreacion = "procesarRespuestaCreacion";
    string functionBindData = "functionBindData";
    vddPartialCreacion.Add("funcionRespuesta", funcionProcesarRespuestaCreacion);
    vddPartialCreacion.Add("functionBindData", functionBindData);
    vddPartialCreacion.Add("selListProductores", selListProductores);
    VMConfirmModalAttributes modalOptsnuevaRecepcion = new VMConfirmModalAttributes
    {
        modalTitle = "Nuevo Registro de Recepcion de Producto",
        action = "create",
        controller = "RecepcionDeProductos",
        callType = VMConfirmModalAttributes.CallType.PARTIAL_VIEW,
        modalID = "mdlCreateRecepcion",
        primaryMessage = "Rellena la forma para crear ingresar manualmente un nuevo registro de recepcion de producto",
        modalStyle = new VMConfirmModalAttributes.Style(VMConfirmModalAttributes.Style.StyleTypes.INFO),
        size = new VMConfirmModalAttributes.Size(VMConfirmModalAttributes.Size.ModalSize.LARGE),
        partialViewURL = "../RecepcionDeProductos/Partial_CreateRecepcionProducto",
        modelForPartial = nuevaRecepcion,
        datosDeVista = vddPartialCreacion
    };

    VMConfirmModalAttributes modalOptsEliminarRecepcion = new VMConfirmModalAttributes
    {
        modalTitle = "Eliminar Registros Seleccionados",
        callType = VMConfirmModalAttributes.CallType.PARTIAL_VIEW,
        modalID = "mdlDeleteRecepcion",
        primaryMessage = "Al confirmar este mensaje, eliminará todos los elementos seleccionados en la tabla.",
        modalStyle = new VMConfirmModalAttributes.Style(VMConfirmModalAttributes.Style.StyleTypes.DANGER),
        size = new VMConfirmModalAttributes.Size(VMConfirmModalAttributes.Size.ModalSize.SMALL),
        partialViewURL = "../RecepcionDeProductos/Partial_ConfirmEliminarProductos",
        modelForPartial = nuevaRecepcion,
    };
}

<p>
    <a href="@Url.Action("Details","Productores", new { id = productor.idProductor,
            temporada = Model.TemporadaDeCosechaID })">
        <i class="glyphicon glyphicon-arrow-left"></i> Ver Movimientos de este productor
    </a>
</p>

@*Panel de informacion general del productor*@
@Html.Partial("../Productores/Partial_InfoProductor", productor)

@*Tabla donde se encuentran todos los ingresos de producto reportados*@
<h4>
    <span>Acumulado de recepción de aceituna </span>
    <i class="fa fa-question-circle helpIcon" 
            onclick='$("#msgAcumuladoRecepcion").slideToggle();
                    $(this).toggleClass("clicked")'
            style="cursor:pointer">
    </i>
</h4>
@*Panel de instrucciones*@
<div id="msgAcumuladoRecepcion" class="alert alert-info" style="display:none">
    En esta tabla se muestran los <strong>registros de recepción de aceituna</strong> que no han sido asociados a un pago.
    <ul>
        <li>Haga <strong>click en las cajas de selección</strong> de la primera columna para seleccionar una recepción a la cual quiera reportar su pago.</li>
        <li>
            Para <strong>seleccionar más de una</strong>, presione la tecla <strong>CTRL</strong> 
            mientras hace click sobre cada una de las recepciones que desea agrupar sobre un mismo pago.
        </li>
        <li>
            Para seleccionar un <strong>rango de registros</strong> de recepción, seleccione un registro y mientras presiona la tecla <strong>SHIFT</strong>,
            seleccione el último elemento del rango.
        </li>
        <li>
            Puede utilizar los botones de <strong>"Seleccionar Todos"</strong> o <strong>"Limpiar"</strong> 
            que se encuentran en la forma de registro de la parte inferior.
        </li>
    </ul>
</div>

@if(!editMode){ 
    @*Modal de confirmacion de eliminacion de ingreso de producto*@
    <div>
        <button class="btn btn-info" onclick="@(functionBindData)({idProductor:@productor.idProductor})"
                data-toggle="modal" data-target="#@modalOptsnuevaRecepcion.modalID">Nuevo</button>
        <button id="btnEditarRecepcion" class="btn btn-primary" onclick="@(functionBindData)(selRowToJson())"
                data-toggle="modal" data-target="#@modalOptsnuevaRecepcion.modalID"
                disabled>
            Editar
        </button>
        <button id="btnEliminarRecepciones" class="btn btn-danger"
                data-toggle="modal" data-target="#@modalOptsEliminarRecepcion.modalID"
                disabled>
            Eliminar
        </button>
    </div>
}

@Html.Partial("Partial_ConfirmationModal", modalOptsnuevaRecepcion)
@Html.Partial("Partial_ConfirmationModal", modalOptsEliminarRecepcion)
@Html.Partial("Partial_ListaIngresosProducto", ingresos, vdd)

<br />
@using (Html.BeginForm())
{
    <div>
        @Html.Partial("../TemporadaDeCosechas/Partial_DetailsTemporada", 
       new TemporadaDeCosecha.VMPreciosProductos(Model.temporadaDeCosecha,productor.zona), vddDetailsTemporada)
    </div>

    @*Forma de alta de ingreso de producto*@
    <div class="panel panel-primary">
        <div class="panel-heading">
            <strong style="color: white">@(editMode ? "Edición" : "Creación")</strong><span> de Registro Ingreso de Producto</span>
        </div>
        <div class="panel-body">
            <div class="form-horizontal" id="formNuevoPagoProducto">
                @Html.AntiForgeryToken()
                @Html.HiddenFor(model => model.idMovimiento)
                @Html.HiddenFor(model => model.idProductor)
                @Html.HiddenFor(model => model.TemporadaDeCosechaID)
                @Html.Hidden("selectedIngresos","",new { @class= "selectedIngresos" })

                @Html.ValidationSummary("", new { @class = "text-danger" })
                <div class="form-group col-md-4">
                    @Html.LabelFor(model => model.fechaMovimiento, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.fechaMovimiento, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.fechaMovimiento, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group col-md-4">
                    @Html.LabelFor(model => model.montoMovimiento, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.montoMovimiento, new
                   {
                       htmlAttributes = new
                       {
                           @class = "form-control",
                           data_mask = "###0.00",
                           data_mask_reverse = "true",
                           @readonly = "readonly"
                       }
                   })
                        @Html.ValidationMessageFor(model => model.montoMovimiento, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group col-md-4">
                    @Html.LabelFor(model => model.semana, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.semana, new { htmlAttributes = new { @class="form-control", min = 0 } })
                        @Html.ValidationMessageFor(model => model.semana, "", new { @class = "text-danger" })
                    </div>
                </div>
                <fieldset class="col-md-12">
                    <legend></legend>
                    @***PRODUCTO 1***@
                    <div class="form-group col-md-6">
                        @Html.LabelFor(model => model.cantidadProducto1, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.cantidadProducto1, new
                       {
                           htmlAttributes = new
                           {
                               @class = "form-control",
                               data_mask = "###0.000",
                               data_mask_reverse = "true",
                               @readonly = "readonly"
                           }
                       })
                            @Html.ValidationMessageFor(model => model.cantidadProducto1, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group col-md-6">
                        @Html.LabelFor(model => model.pagoProducto1, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.pagoProducto1, new
                       {
                           htmlAttributes = new
                           {
                               @class = "form-control",
                               data_mask = "###0.00",
                               data_mask_reverse = "true",
                               @readonly = "readonly"
                           }
                       })
                            @Html.ValidationMessageFor(model => model.pagoProducto1, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    @***PRODUCTO 2***@
                    <div class="form-group col-md-6">
                        @Html.LabelFor(model => model.cantidadProducto2, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.cantidadProducto2, new
                       {
                           htmlAttributes = new
                           {
                               @class = "form-control",
                               data_mask = "###0.000",
                               data_mask_reverse = "true",
                               @readonly = "readonly"
                           }
                       })
                            @Html.ValidationMessageFor(model => model.cantidadProducto2, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-group col-md-6">
                        @Html.LabelFor(model => model.pagoProducto2, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.pagoProducto2, new
                       {
                           htmlAttributes = new
                           {
                               @class = "form-control",
                               data_mask = "###0.00",
                               data_mask_reverse = "true",
                               @readonly = "readonly"
                           }
                       })
                            @Html.ValidationMessageFor(model => model.pagoProducto2, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    @***PRODUCTO 3***@
                    <div class="form-group col-md-6">
                        @Html.LabelFor(model => model.cantidadProducto3, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.cantidadProducto3, new
                       {
                           htmlAttributes = new
                           {
                               @class = "form-control",
                               data_mask = "###0.000",
                               data_mask_reverse = "true",
                               @readonly = "readonly"
                           }
                       })
                            @Html.ValidationMessageFor(model => model.cantidadProducto3, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group col-md-6">
                        @Html.LabelFor(model => model.pagoProducto3, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.pagoProducto3, new
                       {
                           htmlAttributes = new
                           {
                               @class = "form-control",
                               data_mask = "###0.00",
                               data_mask_reverse = "true",
                               @readonly = "readonly"
                           }
                       })
                            @Html.ValidationMessageFor(model => model.pagoProducto3, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    @***PRODUCTO 4***@
                    <div class="form-group col-md-6">
                        @Html.LabelFor(model => model.cantidadProducto4, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.cantidadProducto4, new
                       {
                           htmlAttributes = new
                           {
                               @class = "form-control",
                               data_mask = "###0.000",
                               data_mask_reverse = "true",
                               @readonly = "readonly"
                           }
                       })
                            @Html.ValidationMessageFor(model => model.cantidadProducto4, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-group col-md-6">
                        @Html.LabelFor(model => model.pagoProducto4, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.pagoProducto4, new
                       {
                           htmlAttributes = new
                           {
                               @class = "form-control",
                               data_mask = "###0.00",
                               data_mask_reverse = "true",
                               @readonly = "readonly"
                           }
                       })
                            @Html.ValidationMessageFor(model => model.pagoProducto4, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    @***PRODUCTO 5***@
                    <div class="form-group col-md-6">
                        @Html.LabelFor(model => model.cantidadProducto5, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.cantidadProducto5, new
                       {
                           htmlAttributes = new
                           {
                               @class = "form-control",
                               data_mask = "###0.000",
                               data_mask_reverse = "true",
                               @readonly = "readonly"
                           }
                       })
                            @Html.ValidationMessageFor(model => model.cantidadProducto5, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-group col-md-6">
                        @Html.LabelFor(model => model.pagoProducto5, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.pagoProducto5, new
                       {
                           htmlAttributes = new
                           {
                               @class = "form-control",
                               data_mask = "###0.00",
                               data_mask_reverse = "true",
                               @readonly = "readonly"
                           }
                       })
                            @Html.ValidationMessageFor(model => model.pagoProducto5, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    @***PRODUCTO 6***@
                    <div class="form-group col-md-6">
                        @Html.LabelFor(model => model.cantidadProducto6, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.cantidadProducto6, new
                       {
                           htmlAttributes = new
                           {
                               @class = "form-control",
                               data_mask = "###0.000",
                               data_mask_reverse = "true",
                               @readonly = "readonly"
                           }
                       })
                            @Html.ValidationMessageFor(model => model.cantidadProducto6, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-group col-md-6">
                        @Html.LabelFor(model => model.pagoProducto6, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.pagoProducto6, new
                       {
                           htmlAttributes = new
                           {
                               @class = "form-control",
                               data_mask = "###0.00",
                               data_mask_reverse = "true",
                               @readonly = "readonly"
                           }
                       })
                            @Html.ValidationMessageFor(model => model.pagoProducto6, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </fieldset>
                <div class="form-group col-md-12">
                    <div class="col-md-10">
                        @if ((!Model.yaLiquidado)) { 
                        <button class="btn btn-success" id="btnRegistrar"
                                @(ingresos != null || ingresos.Count() == 0 ? "disabled" : "")>
                            @(editMode ? "Guardar" : "Registrar")
                        </button>
                        }
                        <button class="btn btn-info" type="button" onclick="limpiarSeleccionIngresos()">Limpiar</button>
                        <button class="btn btn-info" type="button" onclick="seleccionarTodosIngresos()">Seleccionar Todos</button>
                    </div>
                    @if (Model.yaLiquidado)
                    {
                        <div class="col-md-12 alert alert-danger" style="margin-top: .5em">
                            Este ingreso de producto no es editable debido a que ya se ha registrado dentro de una
                            <a href="@Url.Action("ReporteLiquidacionSemanal","LiquidacionSemanal",new { id = Model.liquidacionDeCosechaID })">liquidacion semanal</a>.
                            Si desea modificar este registro, necesita cancelar la liquidacion semanal.
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
}
@section Scripts{
<script>
    $('select#idProductor').attr('disabled',true)
    hiddenProductorID = $('<input type="hidden" value="@(Model.idProductor)" name="idProductor">')
    $('#frmNuevaRecepcion').append(hiddenProductorID)
    var selectorInputsPrecios = "#formCostosProducto input#precio";
    var selectedIngresosIDs = new Array();

   //Declaracion de tabla y columnas con sus respectivas propiedades
    var COLS_ENUM = Object.freeze({
        ID: 1, NUM_RECIBO: 2, NUM_PRODUCTOR: 3, FECHA: 5, SEMANA: 6,
        PROD1: 7, PROD2: 8, PROD3: 9, PROD4: 10, PROD5: 11, PROD6: 12,
        OPCIONES: 13,FECHA_STANDAR: 14, ID_PRODUCTOR: 15, ID_PAGO : 16
    })

    var tblRecibosCosechaImportados = $("#tblRecibosCosechaImportados").DataTable({
        columnDefs: [{
            orderable: false,
            className: 'select-checkbox',
            targets: 0
        }, { targets: [COLS_ENUM.ID, COLS_ENUM.FECHA_STANDAR,
            COLS_ENUM.ID_PRODUCTOR,COLS_ENUM.ID_PAGO,@(!showOpts? "COLS_ENUM.OPCIONES" : "")], visible: false }],
        select: {
            style: 'os',
            selector: 'td:first-child'
        },
    });

    @*Declaracion de evento de selecicon de renglon*@
    tblRecibosCosechaImportados.on('select',function(e, dt, type, indexes){
        @(funcionRecalcularMontos)();
        var noSemana
        if(dt.data()[0])
            noSemana = dt.data()[0][COLS_ENUM.SEMANA]
        else
            noSemana = dt.data()[COLS_ENUM.SEMANA]
        $("#formNuevoPagoProducto input#semana").val(noSemana)
    })
    @*Declaracion de evento de selecicon de renglon*@
    .on('deselect',function(e, dt, type, indexes){
        @(funcionRecalcularMontos)();
    });

    function @(funcionRecalcularMontos)() {
        selectedIngresosIDs = new Array();
        var selectedRows = tblRecibosCosechaImportados.rows({selected:true});
        var data = selectedRows.data();
        var totalCant1 = 0, totalCant2 = 0, totalCant3 = 0, totalCant4 = 0,
            totalCant5 = 0, totalCant6 = 0, montoNeto = 0;

        @*Se toman los costos por tipo de producto marcado para esta temporada*@
        var precioProducto1 = Number($(selectorInputsPrecios+"Manzanita").val());
        var precioProducto2 = Number($(selectorInputsPrecios+"Obliza").val());
        var precioProducto3 = Number($(selectorInputsPrecios+"Mission").val());
        var precioProducto4 = Number($(selectorInputsPrecios+"ManzanitaOrg").val());
        var precioProducto5 = Number($(selectorInputsPrecios+"OblizaOrg").val());
        var precioProducto6 = Number($(selectorInputsPrecios+"MissionOrg").val());

        for(var c=0;c<data.length;c++){
            totalCant1 += Number(data[c][COLS_ENUM.PROD1]);
            totalCant2 += Number(data[c][COLS_ENUM.PROD2]);
            totalCant3 += Number(data[c][COLS_ENUM.PROD3]);
            totalCant4 += Number(data[c][COLS_ENUM.PROD4]);
            totalCant5 += Number(data[c][COLS_ENUM.PROD5]);
            totalCant6 += Number(data[c][COLS_ENUM.PROD6]);
            selectedIngresosIDs.push(Number(data[c][COLS_ENUM.ID]));
        }
        var pp1 = totalCant1*precioProducto1, pp2 = totalCant2*precioProducto2,
            pp3 = totalCant3*precioProducto3, pp4 = totalCant4*precioProducto4,
            pp5 = totalCant5*precioProducto5, pp6 = totalCant6*precioProducto6;
        $("#cantidadProducto1").val(numeral(totalCant1).format('0.000')).trigger('input');
        $("#cantidadProducto2").val(numeral(totalCant2).format('0.000')).trigger('input');
        $("#cantidadProducto3").val(numeral(totalCant3).format('0.000')).trigger('input');
        $("#cantidadProducto4").val(numeral(totalCant4).format('0.000')).trigger('input');
        $("#cantidadProducto5").val(numeral(totalCant5).format('0.000')).trigger('input');
        $("#cantidadProducto6").val(numeral(totalCant6).format('0.000')).trigger('input');
        $("#pagoProducto1").val(numeral(pp1).format('0.00')).trigger('input');
        $("#pagoProducto2").val(numeral(pp2).format('0.00')).trigger('input');
        $("#pagoProducto3").val(numeral(pp3).format('0.00')).trigger('input');
        $("#pagoProducto4").val(numeral(pp4).format('0.00')).trigger('input');
        $("#pagoProducto5").val(numeral(pp5).format('0.00')).trigger('input');
        $("#pagoProducto6").val(numeral(pp6).format('0.00')).trigger('input');
        $("#montoMovimiento").val(numeral(pp1 + pp2 + pp3 + pp4+ pp5 + pp6).format('0.00')).trigger('input');

        $("#formNuevoPagoProducto #btnRegistrar").attr('disabled', data.length == 0)
        $("#btnEliminarRecepciones").attr('disabled', data.length == 0)
        $("#btnEditarRecepcion").attr('disabled', data.length == 0)

        console.log(JSON.stringify(selectedIngresosIDs))
        $('.selectedIngresos').val(JSON.stringify(selectedIngresosIDs))
    }

    function selRowToJson() {
        var rows = tblRecibosCosechaImportados.row({ selected: true }).data();
        var row;
        var jsonRes = {};
        row = !rows.rows ? rows : rows[0];

        jsonRes.cantidadTonsProd1 = row[COLS_ENUM.PROD1]
        jsonRes.cantidadTonsProd2 = row[COLS_ENUM.PROD2]
        jsonRes.cantidadTonsProd3 = row[COLS_ENUM.PROD3]
        jsonRes.cantidadTonsProd4 = row[COLS_ENUM.PROD4]
        jsonRes.cantidadTonsProd5 = row[COLS_ENUM.PROD5]
        jsonRes.cantidadTonsProd6 = row[COLS_ENUM.PROD6]
        jsonRes.numeroRecibo = row[COLS_ENUM.NUM_RECIBO]
        jsonRes.fecha = row[COLS_ENUM.FECHA_STANDAR]
        jsonRes.numProductor = row[COLS_ENUM.NUM_PRODUCTOR]
        jsonRes.idProductor = row[COLS_ENUM.ID_PRODUCTOR]
        jsonRes.semana = row[COLS_ENUM.SEMANA]
        jsonRes.recepcionID = row[COLS_ENUM.ID]
        jsonRes.idMovimiento = row[COLS_ENUM.ID_PAGO]

        return jsonRes;
    }

    function limpiarSeleccionIngresos(){
        $('#tblRecibosCosechaImportados').DataTable().table().rows().deselect();
    }

    function seleccionarTodosIngresos(){
        $('#tblRecibosCosechaImportados').DataTable().table().rows().select();
    }

    $("#formCostosProducto input").keyup(function(){
        @(funcionRecalcularMontos)();
    })

    function @(funcionProcesarRespuestaCreacion)(res){
        location.reload();
    }
</script>


@if (editMode)
    {
        <script>
            $('#tblRecibosCosechaImportados').DataTable().table().rows('[default-selected]').select();
        </script>
    }
}