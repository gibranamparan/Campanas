@using CampanasDelDesierto_v1.Models
@model CampanasDelDesierto_v1.Models.VentaACredito

@{
    bool editMode = Model.idMovimiento > 0;
    ViewBag.Title = (editMode ? "Editar" : "Nuevo") + " Venta de Material";
    Layout = "~/Views/Shared/_Layout.cshtml";

    Productor productor = ViewBag.productor;
    List<Producto> Productos = ViewBag.productos;

    ViewDataDictionary vdd = new ViewDataDictionary();
    vdd.Add("selectMode", true);

    List<CompraProducto> compras = null;
    if (editMode) {
        //Se obtiene las compras vendidas para ser editadas
        compras = Model.ComprasProductos.ToList();
    }
    vdd.Add("compras", compras);
}

<p>
    <a href="@Url.Action("Details","Productores", new { id = productor.idProductor , temporada = Model.TemporadaDeCosechaID})">
        <i class="glyphicon glyphicon-arrow-left"></i> Ver Movimientos de este Productor
    </a>
</p>
@Html.Partial("../Productores/Partial_InfoProductor", productor)
@Html.Partial("Partial_ListaProductos", Productos, vdd)
<div id="mensajes" class="container"></div><br />

<div class="panel panel-primary">
    <div class="panel-heading">
        <h3 class="panel-title">Nueva venta de material a crédito</h3>
    </div>
    <div class="panel-body">
        <div class="alert alert-info">
            <strong>@Html.DisplayNameFor(model => model.temporadaDeCosecha.rangoTiempo) de Temporada: </strong>
            @Html.DisplayFor(model => model.temporadaDeCosecha.rangoTiempo).
        </div>
        @using (Html.BeginForm())
        {
            @Html.AntiForgeryToken()
            @Html.HiddenFor(model => model.idProductor)
            @Html.HiddenFor(model => model.TemporadaDeCosechaID)
            @Html.HiddenFor(model => model.idMovimiento)
            @Html.Hidden("compras")

            <div class="form-horizontal">
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                <div class="form-group col-md-6">
                    @Html.LabelFor(model => model.fechaMovimiento, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.fechaMovimiento, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.fechaMovimiento, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group col-md-6">
                    @Html.LabelFor(model => model.montoMovimiento, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.montoMovimiento, new
                       {
                           htmlAttributes =
                                   new
                                   {
                                       @class = "form-control",
                                       data_mask = "###0.00",
                                       data_mask_reverse = "true",
                                       @readonly = "readonly"
                                   }
                       })
                        @Html.ValidationMessageFor(model => model.montoMovimiento, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group col-md-6">
                    @Html.LabelFor(model => model.fechaPagar, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.fechaPagar, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.fechaPagar, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group col-md-6">
                    @Html.LabelFor(model => model.pagareVenta, htmlAttributes: new {@class = "control-label col-md-2"})
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.pagareVenta, new { htmlAttributes = new {
                           @class = "form-control",
                           style= "text-transform: uppercase"
                       } })
                        @Html.ValidationMessageFor(model => model.pagareVenta, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group col-md-6">
                    @Html.LabelFor(model => model.conceptoDeVenta, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.conceptoDeVenta, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.conceptoDeVenta, "", new { @class = "text-danger" })
                    </div>
                </div> 
                
                <div class="form-group col-md-6">
                    @Html.LabelFor(model => model.ordenCompra, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.ordenCompra, new { htmlAttributes = new { @class = "form-control",
                       style = "text-transform: uppercase"
                   } })
                        @Html.ValidationMessageFor(model => model.ordenCompra, "", new { @class = "text-danger" })
                    </div>
                </div> 

                <div class="form-group">
                    <div class="col-md-10">
                        <button id="crear" type="submit" disabled class="btn btn-success">
                            @(editMode ? "Guardar" : "Registrar")
                        </button>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script>
        var COLS_ENUM = Object.freeze({ CANTIDAD: 1, ID: 2, PROD1: 4 })
        var table = $('#Productos').DataTable({
            columnDefs: [{
                orderable: false,
                    className: 'select-checkbox',
                    targets: 0
                }, {
                visible: false,
                    searchable: false
                }],
                select: {
                style: 'os',
                    selector: 'td:first-child'
                },
                order: [[1, 'asc']]
            });

        table.on('select', function (e, dt, type, indexes) {
            var selRow = dt.data()
            agregarSeleccion(selRow)
            funcionRecalcularMontos();
            console.log(compras)
        }).on('deselect', function (e, dt, type, indexes) {
            var unSelRows = dt.data();
            removerSeleccion(unSelRows);
            funcionRecalcularMontos();
            console.log(compras)
        });

        //Data table select sigle row
        var compras = new Array();

        //Metodo que agrega del estado de compras los elementos desseleccionados
        function agregarSeleccion(rows) {
            var renglones = new Array();
            if (!rows.rows) { //Si es un solo elemento
                var inputCantidad = $('input[productoID=' + rows[COLS_ENUM.ID] + ']');
                introducirNuevaCantidad(inputCantidad[0]);
            } else { //Si son varios
                renglones = rows;
                //selectedIngresosIDs = new Array();
                $.each(renglones, function (idx, row) {
                    //compras.push(row[COLS_ENUM.ID])
                    var inputCantidad = $('input[productoID=' + row[COLS_ENUM.ID] + ']');
                    introducirNuevaCantidad(inputCantidad[0]);
                })
            }
        }

        //Metodo que elimina del estado de compras los elementos desseleccionados
        function removerSeleccion(rows) {
            var renglonesAEliminar = new Array();
            if (!rows.rows) {
                renglonesAEliminar.push(rows);
            } else {
                renglonesAEliminar = rows;
            }
            $.each(renglonesAEliminar, function (idx, row) {
                compras = $.grep(compras, function (item, idx) {
                    return item.idProducto == row[COLS_ENUM.ID]
                }, true)
            })
        }

        //Recalcula el total de la venta segun los costos de cantidad de material comprado
        //selecciondos en la tabla
        function funcionRecalcularMontos() {
            /*var selectedRows = table.rows({ selected: true });
            var data = selectedRows.data();*/
            var totalCant1 = 0; var costoUnitario = 0;

            //var cantidad = $('#cantidadMaterial').val();
            if (compras.length==0)
                $('#crear').attr('disabled', true);
            else
            {
                $.each(compras, function (idx, item) {
                    totalCant1 += item.cantidadMaterial * item.costo;
                })
                $('#crear').attr('disabled', false);
            }

            $('#montoMovimiento').val(numeral(totalCant1).format('0.00')).trigger('input');
            $('#montoMovimiento').attr('value', totalCant1);
            $('#compras').val(JSON.stringify(compras))
        }

        function introducirNuevaCantidad(inputCantidad) {
            var selRow = buscarRenglonSeleccionado(inputCantidad)
            //Se el input editado se encontraba seleccionado
            if (selRow)
                nuevoRenglonDeCompras(selRow, inputCantidad)
        }

        function nuevoRenglonDeCompras(selRow, inputCantidad){
            var cantidadMaterial = inputCantidad?inputCantidad.valueAsNumber:Number($(selRow[COLS_ENUM.CANTIDAD]).val());
            //Se agrega el nuevo elemento al arreglo
            var newItem = {
                idProducto: selRow[COLS_ENUM.ID],
                cantidadMaterial: cantidadMaterial,
                costo: currencyToNumber(selRow[COLS_ENUM.PROD1])
            };
            compras.push(newItem);
        }

        function editarElemento(inputEditado) {
            var selRow = buscarRenglonSeleccionado(inputEditado);
            if (selRow) {
                var compraIDX
                $.each(compras, function (idx, item) {
                    if (selRow[COLS_ENUM.ID] == item.idProducto)
                        compraIDX = idx;
                })
                compras[compraIDX].cantidadMaterial = inputEditado.valueAsNumber;

                console.log(JSON.stringify(compras));
            }

            funcionRecalcularMontos();
        }

        function buscarRenglonSeleccionado(input){
            //Se toman los datos de los renglones seleccionados
            var selectedRows = table.rows({ selected: true });
            var data = selectedRows.data()

            //Se busca si el input editado se encuentra seleccionado
            var selRow = $.grep(data, function (item, idx) {
                return item[COLS_ENUM.ID] == $(input).attr('productoID');
            })[0];

            return selRow;
        }
    </script>

    @if (editMode){
    <script>
        $('#Productos').DataTable().table().rows('[default-selected]').select();

        inicializarListadoDeCompras();

        function inicializarListadoDeCompras(){
            var selectedRows = table.rows({ selected: true });
            var data = selectedRows.data();
            compras = new Array();
            $.each(data, function (idx, item) {
                nuevoRenglonDeCompras(item)
            })
            funcionRecalcularMontos();
        }
    </script>
    }
}