@using CampanasDelDesierto_v1.Models
@model CampanasDelDesierto_v1.Models.EmisionDeCheque

@{
    ViewBag.Title = "Create";
    Layout = "~/Views/Shared/_Layout.cshtml";
    bool editMode = Model.idMovimiento>0;

    EmisionDeCheque.VMRetenciones retenciones = new EmisionDeCheque.VMRetenciones();

    Productor productor;  decimal balanceActual;
    if (!editMode) {
        productor = ViewBag.productor;
        balanceActual = ViewBag.balanceActual;
        Model.montoMovimiento = balanceActual;

        /*Just for test*/
        Random random = new Random();
        // decimal montoMovimientoPesos = random.Next(1,10)*50*100;

        const string chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
        Model.cheque = new string(Enumerable.Repeat(chars, 5)
          .Select(s => s[random.Next(s.Length)]).ToArray());
    }
    else
    {
        productor = Model.Productor;
    }

}
<p>
    <a href="@Url.Action("Details","Productores", new { id = productor.idProductor, temporada = Model.TemporadaDeCosechaID })">
        <i class="glyphicon glyphicon-arrow-left"></i> Ver Movimientos de este Productor
    </a>
</p>
@Html.Partial("../Productores/Partial_InfoProductor", productor)

<div class="panel panel-primary">
    <div class="panel-heading">
        <h2 class="panel-title"><strong style="color: white">@(editMode ? "Editar" : "Registrar")</strong> <span class="panel-title">Emision de Cheque</span></h2>
    </div>
    <div class="panel-body">
        <div class="alert alert-info col-md-12">
            <strong>@Html.DisplayNameFor(model => model.temporadaDeCosecha.rangoTiempo) de Temporada: </strong>@Html.DisplayFor(model => model.temporadaDeCosecha.rangoTiempo).
        </div>
        @using (Html.BeginForm())
        {
            @Html.AntiForgeryToken()
            @Html.HiddenFor(model=>model.idMovimiento)
            @Html.HiddenFor(model => model.idProductor)
            @Html.HiddenFor(model => model.TemporadaDeCosechaID)

            <div class="form-horizontal">
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                <div class="form-group col-md-4">
                    @Html.LabelFor(model => model.montoMovimiento, htmlAttributes: new { @class = "control-label col-md-4" })
                    <div class="col-md-8">
                                    @Html.EditorFor(model => model.montoMovimiento, new
                       {
                           htmlAttributes = new
                           {
                               @class = "form-control",
                               data_mask = "###0.00",
                               data_mask_reverse = "true"
                           }
                       })
                        @Html.ValidationMessageFor(model => model.montoMovimiento, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group col-md-4">
                    @Html.LabelFor(model => model.fechaMovimiento, htmlAttributes: new { @class = "control-label col-md-4" })
                    <div class="col-md-8">
                        @Html.EditorFor(model => model.fechaMovimiento, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.fechaMovimiento, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group col-md-4">
                    @Html.LabelFor(model => model.cheque, htmlAttributes: new { @class = "control-label col-md-4" })
                    <div class="col-md-8">
                        @Html.EditorFor(model => model.cheque, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.cheque, "", new { @class = "text-danger" })
                    </div>
                </div>

                @if (!editMode) { 
                    <div class="form-group col-md-4">
                        @Html.LabelFor(model => retenciones.garantiaLimpieza, htmlAttributes: new { @class = "control-label col-md-4" })
                        <div class="col-md-8">
                            @Html.EditorFor(model => retenciones.garantiaLimpieza, new
                           {
                               htmlAttributes = new
                               {
                                   @class = "form-control",
                                   data_mask = "###0.00",
                                   data_mask_reverse = "true",
                                   onkeyup = "recalcularMonto(this)"
                               }
                           })
                            @Html.ValidationMessageFor(model => retenciones.garantiaLimpieza, "", new { @class = "text-danger" })
                        </div>
                    </div>
                }
                <div class="form-group">
                    <div class="col-md-12">
                        <button class="btn btn-success">@(editMode?"Guardar": "Crear")</button>
                    </div>
                </div>
            </div>
        }
    </div>
</div>


@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script>
        function recalcularMonto(tbRetencion) {
            var retencion = Number($(tbRetencion).val());
            $("#montoMovimiento").val(numeral(@Model.montoMovimiento -retencion)
                .format('0.00')).trigger('input');
        }
    </script>
}
