@using CampanasDelDesierto_v1.Models
@using CampanasDelDesierto_v1.HerramientasGenerales
@model CampanasDelDesierto_v1.Models.TemporadaDeCosecha

@{
    ViewBag.Title = "Importación de Recibos por Temporada";
    Layout = "~/Views/Shared/_Layout.cshtml";
    List<ExcelTools.ExcelParseError> erroresExcel = ViewBag.erroresExcel;
    ExcelTools.ExcelParseError errorPrecios = ViewBag.errorPrecios;

    string errorMsgPrimario = "";
    string erroresModalID = "";
    if (erroresExcel != null && erroresExcel.Count()>0) {
        errorMsgPrimario = "Se presentaron <strong>" + erroresExcel.Count() + " errores</strong> al importar el documento Excel."
            + " Revise la tabla de errores de importación en la parte inferior.";
    }
    if (errorPrecios != null && errorPrecios.isError)
    {
        errorMsgPrimario = errorPrecios+"<br>" + errorMsgPrimario;
    }
    /*Modelo para la forma de creacion de nueva recepcion*/
    RecepcionDeProducto nuevaRecepcion = new RecepcionDeProducto
    {
        TemporadaDeCosechaID = Model.TemporadaDeCosechaID,
    };
    ViewDataDictionary vddPartialCreacion = new ViewDataDictionary();
    string funcionProcesarRespuestaCreacion = "procesarRespuestaCreacion";
    string functionBindData = "functionBindData";
    var selListProductores = ViewBag.productores;
    vddPartialCreacion.Add("funcionRespuesta", funcionProcesarRespuestaCreacion);
    vddPartialCreacion.Add("functionBindData", functionBindData);
    vddPartialCreacion.Add("selListProductores", selListProductores);

    VMConfirmModalAttributes modalOptsnuevaRecepcion = new VMConfirmModalAttributes
    {
        modalTitle = "Nuevo Registro de Recepcion de Producto",
        action = "create",
        controller = "RecepcionDeProductos",
        callType = VMConfirmModalAttributes.CallType.PARTIAL_VIEW,
        modalID = "mdlCreateRecepcion",
        primaryMessage = "Rellena la forma para crear ingresar manualmente un nuevo registro de recepcion de producto",
        modalStyle = new VMConfirmModalAttributes.Style(VMConfirmModalAttributes.Style.StyleTypes.INFO),
        size = new VMConfirmModalAttributes.Size(VMConfirmModalAttributes.Size.ModalSize.LARGE),
        partialViewURL = "../RecepcionDeProductos/Partial_CreateRecepcionProducto",
        modelForPartial = nuevaRecepcion,
        datosDeVista = vddPartialCreacion
    };

    VMConfirmModalAttributes modalOptsEliminarRecepcion = new VMConfirmModalAttributes
    {
        modalTitle = "Eliminar Registros Seleccionados",
        callType = VMConfirmModalAttributes.CallType.PARTIAL_VIEW,
        modalID = "mdlDeleteRecepcion",
        primaryMessage = "Al confirmar este mensaje, confirma que desea eliminar todos los registros seleccionados"+
        " importados desde Excel que no aún no han sido registrados como pagados.",
        modalStyle = new VMConfirmModalAttributes.Style(VMConfirmModalAttributes.Style.StyleTypes.DANGER),
        size = new VMConfirmModalAttributes.Size(VMConfirmModalAttributes.Size.ModalSize.SMALL),
        partialViewURL = "../RecepcionDeProductos/Partial_ConfirmEliminarProductos",
        modelForPartial = nuevaRecepcion,
    };
}
@Html.Partial("Partial_ConfirmationModal", modalOptsnuevaRecepcion) @*Modal para nuevo registro de producto*@
@Html.Partial("Partial_ConfirmationModal", modalOptsEliminarRecepcion) @*Modal para confirmacion de eliminacion de ingreso de producto*@
<p>
    <a href="@Url.Action("Index")">
        <i class="glyphicon glyphicon-arrow-left"></i> Historial de Temporadas
    </a>
</p>
<div class="panel panel-info">
    <div class="panel-heading">
        <h3 class="panel-title"><strong>Temporada: </strong>@Model.rangoTiempo</h3>
    </div>
    <div class="panel-body">
        <div class="form-inline">
            <div class="form-group col-md-3">
                @Html.LabelFor(model => model.precioProducto1)
                @Html.DisplayFor(model => model.precioProducto1)
            </div>
            <div class="form-group col-md-3">
                @Html.LabelFor(model => model.precioProducto2)
                @Html.DisplayFor(model => model.precioProducto2)
            </div>
            <div class="form-group col-md-3">
                @Html.LabelFor(model => model.precioProducto3)
                @Html.DisplayFor(model => model.precioProducto3)
            </div>
            <div class="form-group col-md-3">
                @Html.LabelFor(model => model.precioProducto4)
                @Html.DisplayFor(model => model.precioProducto4)
            </div>
        </div>
        <a href="@Url.Action("Edit", new { id = Model.TemporadaDeCosechaID })">
            <i class="fa fa-pencil"></i> Editar
        </a> 
    </div>
</div>
@using (Html.BeginForm(null, null, FormMethod.Post,
                            new { id="frmImportExcel", enctype = "multipart/form-data", @class = "form-inline" }))
{
    <div class="">
        @Html.ValidationSummary()
    </div>
    <div class="row">
        @*Controles para la importacion*@
        <div class="col-md-12">
            @*Control para subir archivo*@
            <label for="xlsFile">Archivo Excel</label>
            <input id="xlsFile" name="xlsFile" type="file" class="form-control"
                   accept="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" />

            @*Boton para confirmar la subida del archivo*@
            <button id="btnUpload" class="btn btn-success" disabled>
                <i class="fa fa-upload"></i> Subir
            </button>

            @*Boton para desplegar instrucciones*@
            <i class="fa fa-question-circle helpIcon"
               onclick="$('#msgAyudaImportacion').slideToggle(); $(this).toggleClass('clicked')"
               style="cursor: pointer"></i>
            <img id="imgLoading" src="~/images/loading.gif" style="display:none; width: 2.5em" />

            
        </div>
        @*Instrucciones de importacion*@
        <div id="msgAyudaImportacion" style="display: none;" class="col-md-12 alert alert-info">
            Para importar la información de los productores, cargue en la aplicación el archivo Excel
            de <strong>"Acumulados de recepción de Aceituna"</strong> correspondiente a esta temporada.
            Hecho esto, los datos estarán disponibles para generar pagos semanales de producto y ser
            integrados al balance del productor. La estructura del archivo Excel debe ser como
            la mostrada en la siguiente imagen: <br />
            <div style="text-align: center">
                <img style="border: 1px solid; margin: 1em auto"
                     src="~/images/recepciones/recepciones_excel.png" />
            </div>
            El sistema buscará en la base de datos los registros con el mismo numero de recibo
            que marque el archivo Excel.
            <ul>
                <li>
                    @*<strong>En caso de encontrarlo</strong>, modificará la información almacenada
                    en la base de datos por la informacion del registro Excel.*@
                    <strong>En caso de encontrarlo</strong>, ignorará el registro.
                </li>
                <li>
                    <strong>En caso de no encontrarlo</strong>, se creará un nuevo registro de ingreso
                    de producto con las datos del archivo Excel.
                </li>
                <li>En caso de haber cometido un erro de captura, 
                utilice las opciones de borrado y de edicion para hacer correcciones a los datos importados.</li>
            </ul>
        </div>
    </div>
}

@*Modal de confirmacion de eliminacion de ingreso de producto*@
<div style="margin: .5em 0">

    @if (Model.recepcionesDeProducto != null && Model.recepcionesDeProducto.Count() > 0)
    {
        <button id="btnEditarRecepcion" class="btn btn-primary" onclick="@(functionBindData)(selRowToJson())"
                data-toggle="modal" data-target="#@modalOptsnuevaRecepcion.modalID"
                disabled>
            Editar
        </button>

        <button class="btn btn-info" type="button" onclick="limpiarSeleccionIngresos()">Limpiar</button>
        <button class="btn btn-info" type="button" onclick="seleccionarTodosIngresos()">Seleccionar Todos</button>
        <button id="btnEliminarRecepciones" class="btn btn-danger"
                data-toggle="modal" data-target="#@modalOptsEliminarRecepcion.modalID"
                disabled>
            Eliminar
        </button>
    }
</div>

@*Panel que muestra la recepcion ingresada en el excel*@
<div class="panel panel-primary">
    <div class="panel-heading">
        <h3 class="panel-title">Ingreso de producto (Importado de Excel)</h3>
    </div>
    <div class="panel-body">
        @if (Model.recepcionesDeProducto!=null && Model.recepcionesDeProducto.Where(rec => rec.importadoDesdeExcel).Count() > 0) {
        <table id="tblRecibosCosechaImportados" class="table table-hover table-striped">
            <thead>
                <tr>
                    <th></th>
                    <th></th>
                    <th>
                        @Html.DisplayNameFor(model => Model.recepcionesDeProducto.FirstOrDefault().numeroRecibo)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => Model.recepcionesDeProducto.FirstOrDefault().numProductor)
                    </th>
                    <th style="width: 15em">
                        @Html.DisplayNameFor(model => Model.recepcionesDeProducto.FirstOrDefault().nombreProductor)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => Model.recepcionesDeProducto.FirstOrDefault().fecha)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => Model.recepcionesDeProducto.FirstOrDefault().semana)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => Model.recepcionesDeProducto.FirstOrDefault().cantidadTonsProd1)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => Model.recepcionesDeProducto.FirstOrDefault().cantidadTonsProd2)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => Model.recepcionesDeProducto.FirstOrDefault().cantidadTonsProd3)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => Model.recepcionesDeProducto.FirstOrDefault().cantidadTonsProd4)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => Model.recepcionesDeProducto.FirstOrDefault().cantidadTonsProd5)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => Model.recepcionesDeProducto.FirstOrDefault().cantidadTonsProd6)
                    </th>
                    <th></th>
                    <th></th>
                    <th></th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var recepcion in Model.recepcionesDeProducto.Where(rec=>rec.importadoDesdeExcel).OrderBy(rec=>rec.numeroRecibo))
                {
                    <tr>
                        <td></td>
                        <td>@Html.DisplayFor(model => recepcion.recepcionID)</td>
                        <td>
                            @Html.DisplayFor(model=>recepcion.numeroRecibo)
                        </td>

                        <td>
                            @Html.DisplayFor(model => recepcion.numProductor)
                        </td>
                        <td style="width: 10em">
                            @recepcion.nombreProductor.Substring(0,14)...
                        </td>
                        <td>
                            @recepcion.fecha.ToString("dd-MMM-yy")
                        </td>
                        <td>
                            @Html.DisplayFor(model => recepcion.semana)
                        </td>
                        <td>
                            @Html.DisplayFor(model => recepcion.cantidadTonsProd1)
                        </td>
                        <td>
                            @Html.DisplayFor(model => recepcion.cantidadTonsProd2)
                        </td>
                        <td>
                            @Html.DisplayFor(model => recepcion.cantidadTonsProd3)
                        </td>
                        <td>
                            @Html.DisplayFor(model => recepcion.cantidadTonsProd4)
                        </td>
                        <td>
                            @Html.DisplayFor(model => recepcion.cantidadTonsProd5)
                        </td>
                        <td>
                            @Html.DisplayFor(model => recepcion.cantidadTonsProd6)
                        </td>
                        <td>
                            @if(recepcion.liquidacionYaEmitada || recepcion.pagoYaRegistrado) { 
                            <div class="dropdown_actions">
                                <button onclick="openActionsDropDown(this)"
                                        class="dropbtn btn btn-default">
                                    <i class="glyphicon glyphicon-option-horizontal"></i>
                                </button>
                                <div id="myDropdown" class="dropdown-content">
                                    @if (recepcion.pagoYaRegistrado)
                                    {
                                        <a target="_blank"
                                           href="@Url.Action("Details", "MovimientoFinancieros", new { id = recepcion.pago.idMovimiento })">
                                            Registro de Cosecha</a>
                                    }

                                    @if (recepcion.liquidacionYaEmitada)
                                    {
                                        <a target="_blank"
                                           href="@Url.Action("Details", "MovimientoFinancieros", new { id = recepcion.pago.liquidacionDeCosechaID })">
                                            Registro de Liquidación</a>
                                    }
                                </div>
                            </div>
                            }
                        </td>
                        <td>@Html.DisplayFor(model => recepcion.fecha)</td>
                        <td>@Html.DisplayFor(model => recepcion.idProductor)</td>
                        <td>@Html.DisplayFor(model => recepcion.movimientoID)</td>
                    </tr>
                }
            </tbody>
        </table>
        }else
        {
            <div class="alert alert-warning">
                No se han importado desde excel registros para esta temporada.
            </div>
        }
    </div>
</div>

@if (!String.IsNullOrEmpty(errorMsgPrimario))
{
    erroresModalID = "importExcelErrorMessage";
    ViewDataDictionary vdd = new ViewDataDictionary();
    vdd.Add("erroresModalID", erroresModalID);
    vdd.Add("errorMsgPrimario", errorMsgPrimario);
    <div>
        @Html.Partial("../Shared/Partial_ExcelErrors", erroresExcel, vdd);
    </div>
}

@section Scripts{
    <script>
        //Declaracion de tabla y columnas con sus respectivas propiedades
        var COLS_ENUM = Object.freeze({
            ID: 1, NUM_RECIBO: 2, NUM_PRODUCTOR: 3, FECHA: 5, SEMANA: 6,
            PROD1: 7, PROD2: 8, PROD3: 9, PROD4: 10, PROD5: 11, PROD6: 12, 
            FECHA_STANDAR: 14, ID_PRODUCTOR: 15, ID_PAGO : 16
        })

        var tblRecibos = $("#tblRecibosCosechaImportados").DataTable({
            columnDefs: [{
                orderable: false,
                className: 'select-checkbox',
                targets: 0
            }, { targets: [COLS_ENUM.ID, COLS_ENUM.FECHA_STANDAR, 
                COLS_ENUM.ID_PRODUCTOR,COLS_ENUM.ID_PAGO], visible: false }],
            select: {
                style: 'os',
                selector: 'td:first-child'
            },
        });

        selectedIngresosIDs = new Array();
        //Se habilita el boton primario si se selecciono un archivo
        $('#xlsFile').change(function () {
            if(this.files.length)
                $('#btnUpload').prop('disabled',false)
            else
                $('#btnUpload').prop('disabled', true)
        })
        //Se muestra loading image y se deshabilita el boton primario
        $('#frmImportExcel').submit(function(){
            $('#imgLoading').fadeIn();
            $('#btnUpload').prop('disabled', true)
        })

        @*Declaracion de evento de selecicon de renglon*@
        tblRecibos.on('select', function (e, dt, type, indexes) {
            agregarSeleccion(dt.data())
            $('.selectedIngresos').val(JSON.stringify(selectedIngresosIDs))
            console.log(selectedIngresosIDs)
            refreshState()
        })
        @*Declaracion de evento de selecicon de renglon*@
        .on('deselect', function (e, dt, type, indexes) {
            removerSeleccion(dt.data())
            $('.selectedIngresos').val(JSON.stringify(selectedIngresosIDs))
            console.log(selectedIngresosIDs)
            refreshState()
        });

        //Habilita o deshabilita bontones de ediciones y eliminacion si hay registros seleccionados
        function refreshState(){
            $('#btnEliminarRecepciones, #btnEditarRecepcion').prop('disabled', !selectedIngresosIDs.length)
        }

        //Metodo que elimina del estado de compras los elementos desseleccionados
        function removerSeleccion(rows) {
            var renglonesAEliminar = new Array();
            if (!rows.rows) {
                renglonesAEliminar.push(rows);
            } else {
                renglonesAEliminar = rows;
            }
            $.each(renglonesAEliminar, function (idx, row) {
                selectedIngresosIDs = $.grep(selectedIngresosIDs, function (item) {
                    return item == row[COLS_ENUM.ID]
                }, true)
            })
        }

        //Metodo que elimina del estado de compras los elementos desseleccionados
        function agregarSeleccion(rows) {
            var renglones = new Array();
            if (!rows.rows) {
                selectedIngresosIDs.push(rows[COLS_ENUM.ID]);
            } else {
                renglones = rows;
                selectedIngresosIDs = new Array();
                $.each(renglones, function (idx, row) {
                    selectedIngresosIDs.push(row[COLS_ENUM.ID])
                })
            }
        }

        function selRowToJson() {
            var rows = tblRecibos.row({ selected: true }).data();
            var row;
            var jsonRes = {};
            row = !rows.rows ? rows : rows[0];

            jsonRes.cantidadTonsProd1 = row[COLS_ENUM.PROD1]
            jsonRes.cantidadTonsProd2 = row[COLS_ENUM.PROD2]
            jsonRes.cantidadTonsProd3 = row[COLS_ENUM.PROD3]
            jsonRes.cantidadTonsProd4 = row[COLS_ENUM.PROD4]
            jsonRes.cantidadTonsProd5 = row[COLS_ENUM.PROD5]
            jsonRes.cantidadTonsProd6 = row[COLS_ENUM.PROD6]
            jsonRes.numeroRecibo = row[COLS_ENUM.NUM_RECIBO]
            jsonRes.fecha = row[COLS_ENUM.FECHA_STANDAR]
            jsonRes.numProductor = row[COLS_ENUM.NUM_PRODUCTOR]
            jsonRes.idProductor = row[COLS_ENUM.ID_PRODUCTOR]
            jsonRes.semana = row[COLS_ENUM.SEMANA]
            jsonRes.recepcionID = row[COLS_ENUM.ID]
            jsonRes.idMovimiento = row[COLS_ENUM.ID_PAGO]

            return jsonRes;
        }

        function limpiarSeleccionIngresos() {
            tblRecibos.table().rows().deselect();
        }

        function seleccionarTodosIngresos() {
            tblRecibos.table().rows().select();
        }

        function limpiarSeleccionIngresos() {
            tblRecibos.table().rows().deselect();
        }

        function @(funcionProcesarRespuestaCreacion)(){
            location.reload();
        }
    </script>

    @if (erroresExcel != null && erroresExcel.Count() > 0)
    {
        <script>
                $('@("#"+ erroresModalID)').modal();
        </script>
    }
}